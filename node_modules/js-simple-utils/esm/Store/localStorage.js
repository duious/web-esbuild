/**
 * @module sLocalStorage
 * @since 0.0.1
 * @description sLocalStorage模块, 存储键值到localStorage, 提供对应操作后的结果状态, 并提供相关操作
 * @example
 * // first import sLocalStorage
 * import { sLocalStorage } from 'js-simple-utils'
 * // then use sLocalStorage
 * sLocalStorage.setItem('key', 'value')
 */
/**
 * 最大可存储长度
 * @constant {number} MAX_SIZE
 * @static
 * @since 0.0.1
 * @default 5 * 1024 * 1024
 */
const MAX_SIZE = 5 * 1024 * 1024;
/**
 * 增加localStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @param {any} val 键值
 * @return {boolean} true成功/false失败
 * @example
 * sLocalStorage.setItem('key', 'value')
 */
const setItem = (key, val) => {
    if (!key)
        return false;
    if (Object.prototype.toString.call(val) === '[object Object]') {
        val = JSON.stringify(val);
    }
    if (isFull(key, val)) {
        return false;
    }
    window.localStorage.setItem(key, val);
    return isItemExist(key);
};
/**
 * 删除localStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true成功/false失败
 * @example
 * sLocalStorage.delItem('key')
 */
const delItem = (key) => {
    if (!key)
        return false;
    window.localStorage.removeItem(key);
    return !isItemExist(key);
};
/**
 * 获取localStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {null | string | number | boolean}
 * @example
 * sLocalStorage.getItem('key')
 */
const getItem = (key) => {
    if (!key)
        return null;
    return window.localStorage.getItem(key);
};
/**
 * 检查localStorage键值是否存在
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true存在 false不存在
 * @example
 * sLocalStorage.isItemExist('key')
 */
const isItemExist = (key) => {
    return !!getItem(key);
};
/**
 * 清理localStorage全部键值
 * @static
 * @since 0.0.1
 * @return {boolean} true成功/false失败
 * @example
 * sLocalStorage.clear()
 */
const clear = () => {
    window.localStorage.clear();
    return getSize() === 0;
};
/**
 * 获取localStorage已存储键数量
 * @static
 * @since 0.0.1
 * @return {number} localStorage已存储键数量
 * @example
 * sLocalStorage.getLength()
 */
const getLength = () => {
    return window.localStorage.length;
};
/**
 * 获取localStorage已存储键值大小
 * @static
 * @since 0.0.1
 * @returns {number} 返回localStorage已存储键值长度单位为字节
 * @example
 * sLocalStorage.getSize()
 */
const getSize = () => {
    let size = 0;
    const obj = window.localStorage;
    for (const item in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, item)) {
            size += obj.getItem(item).length;
        }
    }
    return size;
};
/**
 * 是否已超出最大存储长度
 * @static
 * @since 0.0.1
 * @param {?string} key 键名
 * @param {?string} val 键值
 * @returns {boolean} true已满 false未满
 * @example
 * sLocalStorage.isFull('key', 'value')
 * sLocalStorage.isFull()
 */
const isFull = (key, val) => {
    if (val) {
        return val.length + getSize() >= MAX_SIZE;
    }
    return getSize() >= MAX_SIZE;
};
var localStorage = { setItem, delItem, getItem, clear, getLength, isItemExist, isFull };

export { clear, localStorage as default, delItem, getItem, getLength, isFull, isItemExist, setItem };
