/**
 * 增加sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @param {any} val 键值
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.setItem('key', 'value')
 */
declare const setItem: (key: string, val: any) => boolean;
/**
 * 删除sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.delItem('key')
 */
declare const delItem: (key: string) => boolean;
/**
 * 获取sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {null | string}
 * @example
 * sSessionStorage.getItem('key')
 */
declare const getItem: (key: string) => null | string;
/**
 * 检查sessionStorage键值是否存在
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true存在 false不存在
 * @example
 * sSessionStorage.isItemExist('key')
 */
declare const isItemExist: (key: string) => boolean;
/**
 * 清理sessionStorage全部键值
 * @static
 * @since 0.0.1
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.clear()
 */
declare const clear: () => boolean;
/**
 * 获取sessionStorage已存储键数量
 * @static
 * @since 0.0.1
 * @return {number} sessionStorage已存储键数量
 * @example
 * sSessionStorage.getLength()
 */
declare const getLength: () => number;
/**
 * 获取sessionStorage已存储键值大小
 * @static
 * @since 0.0.1
 * @returns {number} 返回sessionStorage已存储键值长度单位为字节
 * @example
 * sSessionStorage.getSize()
 */
declare const getSize: () => number;
/**
 * 是否已超出最大存储长度
 * @static
 * @since 0.0.1
 * @param {?string} key 键名
 * @param {?string} val 键值
 * @returns {boolean} true已满 false未满
 * @example
 * sSessionStorage.isFull('key', 'value')
 */
declare const isFull: (key?: string, val?: any) => boolean;
export { setItem, delItem, getItem, isItemExist, clear, getLength, getSize, isFull };
declare const _default: {
    setItem: (key: string, val: any) => boolean;
    delItem: (key: string) => boolean;
    getItem: (key: string) => string;
    isItemExist: (key: string) => boolean;
    clear: () => boolean;
    getLength: () => number;
    getSize: () => number;
    isFull: (key?: string, val?: any) => boolean;
};
export default _default;
