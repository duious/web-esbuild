/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * @module sObject
 * @since 0.0.3
 * @description sObject模块, 提供对象处理
 * @example
 * // first import sObject
 * import { sObject } from 'js-simple-utils'
 * // then use sObject
 * sObject.isTrueValue('123@gmail.com'); // true
 * sObject.isTrueValue(123); // true
 * sObject.isTrueValue([]]); // false
 */
/**
 * 对象类型枚举
 * @enum {string}
 * @static
 * @since 0.0.3
 */
const OBJECT_TYPE = {
    args: '[object Arguments]',
    array: '[object Array]',
    async: '[object AsyncFunction]',
    bool: '[object Boolean]',
    date: '[object Date]',
    domExc: '[object DOMException]',
    error: '[object Error]',
    func: '[object Function]',
    gen: '[object GeneratorFunction]',
    map: '[object Map]',
    number: '[object Number]',
    null: '[object Null]',
    object: '[object Object]',
    promise: '[object Promise]',
    proxy: '[object Proxy]',
    regexp: '[object RegExp]',
    set: '[object Set]',
    string: '[object String]',
    symbol: '[object Symbol]',
    undefined: '[object Undefined]',
    weakMap: '[object WeakMap]',
    weakSet: '[object WeakSet]',
    arrayBuffer: '[object ArrayBuffer]',
    dataView: '[object DataView]',
    float32: '[object Float32Array]',
    float64: '[object Float64Array]',
    int8: '[object Int8Array]',
    int16: '[object Int16Array]',
    int32: '[object Int32Array]',
    uint8: '[object Uint8Array]',
    uint8Clamped: '[object Uint8ClampedArray]',
    uint16: '[object Uint16Array]',
    uint32: '[object Uint32Array]',
};
/**
 * 不可克隆属性类型
 * @static
 * @since 0.0.3
 */
const UN_CLONE_ABLE_TYPE = [OBJECT_TYPE.error, OBJECT_TYPE.func, OBJECT_TYPE.weakMap];
/**
 * 判断对象是否为真值
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是真值, false: 不是真值
 * @example
 * sObject.isTrueValue(item)
 */
const isTrueValue = (obj) => {
    switch (Object.prototype.toString.call(obj)) {
        case OBJECT_TYPE.object:
            return Object.keys(obj).length !== 0;
        case OBJECT_TYPE.array:
            if (obj.length === 0 || obj.length !== obj.filter((val) => val).length) {
                return false;
            }
            return obj.filter((val) => isTrueValue(val)).length === obj.length;
        // TODO
        case OBJECT_TYPE.set:
        case OBJECT_TYPE.map:
            return true;
        case OBJECT_TYPE.number:
            return !Number.isNaN(obj);
        case OBJECT_TYPE.string:
            return !['', 'null', 'nan', 'undefined', '{}', '[]'].includes(String.prototype.toLowerCase.call(obj));
        case OBJECT_TYPE.func:
        case OBJECT_TYPE.bool:
        case OBJECT_TYPE.date:
        case OBJECT_TYPE.regexp:
        case OBJECT_TYPE.symbol:
        case OBJECT_TYPE.error:
            return true;
        case OBJECT_TYPE.null:
        case OBJECT_TYPE.undefined:
            return false;
        default:
            return false;
    }
};
/**
 * 判断入參是否为对象
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是对象, false: 不是对象
 * @example
 * sObject.isObject(item)
 */
const isObject = (obj) => {
    return Object.prototype.toString.call(obj) === OBJECT_TYPE.object;
};
/**
 * 判断入參是否为Set
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean}
 * @example
 * sObject.isSet(item)
 */
const isSet = (obj) => {
    return Object.prototype.toString.call(obj) === OBJECT_TYPE.set;
};
/**
 * 判断入參是否为Map
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是Map, false: 不是Map
 * @example
 * sObject.isMap(item)
 */
const isMap = (obj) => {
    return Object.prototype.toString.call(obj) === OBJECT_TYPE.map;
};
/**
 * 判断入參是否为Buffer
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是Buffer, false: 不是Buffer
 * @example
 * sObject.isBuffer(item)
 */
const isBuffer = (obj) => {
    return Buffer.isBuffer(obj);
};
var index = { OBJECT_TYPE, UN_CLONE_ABLE_TYPE, isTrueValue, isObject, isSet, isMap, isBuffer };

export { OBJECT_TYPE, UN_CLONE_ABLE_TYPE, index as default, isBuffer, isMap, isObject, isSet, isTrueValue };
