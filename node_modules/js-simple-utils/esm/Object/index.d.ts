/**
 * @module sObject
 * @since 0.0.3
 * @description sObject模块, 提供对象处理
 * @example
 * // first import sObject
 * import { sObject } from 'js-simple-utils'
 * // then use sObject
 * sObject.isTrueValue('123@gmail.com'); // true
 * sObject.isTrueValue(123); // true
 * sObject.isTrueValue([]]); // false
 */
/**
 * 对象类型枚举
 * @enum {string}
 * @static
 * @since 0.0.3
 */
declare const OBJECT_TYPE: {
    [key: string]: string;
};
/**
 * 不可克隆属性类型
 * @static
 * @since 0.0.3
 */
declare const UN_CLONE_ABLE_TYPE: string[];
/**
 * 判断对象是否为真值
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是真值, false: 不是真值
 * @example
 * sObject.isTrueValue(item)
 */
declare const isTrueValue: (obj: any) => boolean;
/**
 * 判断入參是否为对象
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是对象, false: 不是对象
 * @example
 * sObject.isObject(item)
 */
declare const isObject: (obj: any) => boolean;
/**
 * 判断入參是否为Set
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean}
 * @example
 * sObject.isSet(item)
 */
declare const isSet: (obj: any) => boolean;
/**
 * 判断入參是否为Map
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是Map, false: 不是Map
 * @example
 * sObject.isMap(item)
 */
declare const isMap: (obj: any) => boolean;
/**
 * 判断入參是否为Buffer
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是Buffer, false: 不是Buffer
 * @example
 * sObject.isBuffer(item)
 */
declare const isBuffer: (obj: any) => boolean;
declare const _default: {
    OBJECT_TYPE: {
        [key: string]: string;
    };
    UN_CLONE_ABLE_TYPE: string[];
    isTrueValue: (obj: any) => boolean;
    isObject: (obj: any) => boolean;
    isSet: (obj: any) => boolean;
    isMap: (obj: any) => boolean;
    isBuffer: (obj: any) => boolean;
};
export default _default;
export { OBJECT_TYPE, UN_CLONE_ABLE_TYPE, isTrueValue, isObject, isSet, isMap, isBuffer };
