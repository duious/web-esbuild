/**
 * @module sRegExp
 * @since 0.0.1
 * @description sRegExp模块, 提供正则表达式
 * @example
 * // first import sRegExp
 * import { sRegExp } from 'js-simple-utils'
 * // then use sRegExp
 * sRegExp.isEmail('123@gmail.com')
 * sRegExp.EMAIL.test('123@gmail.com')
 */
declare const PASSWORD: RegExp, PASSWORD_NUM_4: RegExp, PASSWORD_NUM_6: RegExp, PASSWORD_ALL_6_16: RegExp, isPassword: (password: string) => boolean, isPasswordNum4: (password: string) => boolean, isPasswordNum6: (password: string) => boolean, isPasswordAll6To16: (password: string) => boolean;
declare const PHONE: RegExp, PHONE_86: RegExp, PHONE_OTHER: RegExp, isPhone: (phone: string) => boolean, isPhone86: (phone: string) => boolean, isPhoneOther: (phone: string) => boolean;
/**
 * 电子邮件
 * @static
 * @since 0.0.2
 * @constant {RegExp} EMAIL
 * @example
 * sRegExp.EMAIL.test('123@qq.com')
 */
declare const EMAIL: RegExp;
/**
 * 日期字符串
 * @inner
 * @since 0.0.2
 * @constant {RegExp} DATE_STRING
 * @example
 * 2022-01-01 00:00:00
 * 2022-01-01 00.00.00
 * 2022/01/01 00:00:00
 * 2022/01/01 00.00.00
 * sRegExp.DATE_STRING.test(item) // true
 */
declare const DATE_STRING: RegExp;
/**
 * 日期字符串格式化模版
 * @inner
 * @since 0.0.2
 * @constant {RegExp} DATE_STRING_FORMAT
 * @example
 * sRegExp.DATE_STRING_FORMAT.test(item) // true
 */
declare const DATE_STRING_FORMAT: RegExp;
/**
 * 邮编
 * @static
 * @since 0.0.2
 * @constant {RegExp} POST_CODE
 * @example
 * sRegExp.POST_CODE.test('123456') // true
 */
declare const POST_CODE: RegExp;
/**
 * 数字
 * @static
 * @since 0.0.2
 * @constant {RegExp} NUMBER
 * @example
 * sRegExp.NUMBER.test('123') // true
 */
declare const NUMBER: RegExp;
/**
 * 正整数
 * @static
 * @since 0.0.2
 * @constant {RegExp} INTEGER
 * @example
 * sRegExp.INTEGER.test('123') // true
 */
declare const INTEGER: RegExp;
/**
 * 完整url
 * @static
 * @since 0.0.2
 * @constant {RegExp} URL
 * @example
 * sRegExp.URL.test('https://www.baidu.com') // true
 */
declare const URL: RegExp;
/**
 * 是否是电子邮件
 * @static
 * @since 0.0.2
 * @param {string} email 字符串
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isEmail('123@qq.com') // true
 */
declare const isEmail: (email: string) => boolean;
/**
 * 是否是邮编
 * @static
 * @since 0.0.2
 * @param {number} postCode 字符串
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPostCode('123456') // true
 */
declare const isPostCode: (postCode: string) => boolean;
/**
 * 判断是否是数字
 * @static
 * @since 0.0.2
 * @param {string} number 数字
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isNumber('123') // true
 */
declare const isNumber: (number: string) => boolean;
/**
 * 是否是正整数
 * @static
 * @since 0.0.2
 * @param {string} int 整数
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isInteger('123') // true
 */
declare const isInteger: (int: string) => boolean;
/**
 * 是否是完整url
 * @static
 * @since 0.0.2
 * @param {string} url 完整url
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isUrl('https://www.baidu.com') // true
 */
declare const isUrl: (url: string) => boolean;
/**
 * 复制正则表达式
 * @static
 * @since 0.0.3
 * @param {Object} regexp 正则表达式
 * @returns {Object} 正则表达式
 * @example
 * sRegExp.cloneRegExp(/^a/i) // /^a/i
 */
declare const cloneRegExp: (regexp: RegExp | any) => RegExp;
export { PASSWORD, PASSWORD_NUM_4, PASSWORD_NUM_6, PASSWORD_ALL_6_16, cloneRegExp, isPassword, isPasswordNum4, isPasswordNum6, isPasswordAll6To16, PHONE, PHONE_86, PHONE_OTHER, isPhone, isPhone86, isPhoneOther, EMAIL, DATE_STRING, DATE_STRING_FORMAT, POST_CODE, NUMBER, INTEGER, URL, isEmail, isPostCode, isNumber, isInteger, isUrl, };
declare const _default: {
    PASSWORD: RegExp;
    PASSWORD_NUM_4: RegExp;
    PASSWORD_NUM_6: RegExp;
    PASSWORD_ALL_6_16: RegExp;
    cloneRegExp: (regexp: any) => RegExp;
    isPassword: (password: string) => boolean;
    isPasswordNum4: (password: string) => boolean;
    isPasswordNum6: (password: string) => boolean;
    isPasswordAll6To16: (password: string) => boolean;
    PHONE: RegExp;
    PHONE_86: RegExp;
    PHONE_OTHER: RegExp;
    isPhone: (phone: string) => boolean;
    isPhone86: (phone: string) => boolean;
    isPhoneOther: (phone: string) => boolean;
    EMAIL: RegExp;
    POST_CODE: RegExp;
    NUMBER: RegExp;
    INTEGER: RegExp;
    URL: RegExp;
    isEmail: (email: string) => boolean;
    isPostCode: (postCode: string) => boolean;
    isNumber: (number: string) => boolean;
    isInteger: (int: string) => boolean;
    isUrl: (url: string) => boolean;
};
export default _default;
