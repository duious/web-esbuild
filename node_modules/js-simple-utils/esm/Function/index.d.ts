/**
 * @module sFunction
 * @since 0.0.3
 * @description sFunction模块, 提供函数相关/独立函数处理
 * @example
 * // first import sFunction
 * import { sFunction } from 'js-simple-utils'
 * // then use sFunction
 * sFunction.isTrueValue('123@gmail.com'); // true
 */
/**
 * 空函数
 * @static
 * @since 0.0.3
 * @returns {void}
 */
declare const noop: () => void;
/**
 * 深拷贝
 * @static
 * @since 0.0.3
 * @description 使用广度优先方式进行深拷贝，已支持类型：非对象、数组、对象、正则、日期、Symbol、Map、Set<br>
 * 对于一般js对象或后端返回数据可放心使用<br>
 * 若待拷贝对象内包含函数，慎用
 * @param {any} value 待拷贝的值
 * @returns {any} 拷贝后的值
 * @example
 * const obj = { a:1, b:true, c: new Date(), d: new Map(), e: new Set(), f: /\d+/g, g: [1,2,3], h: { i:1 } };
 * obj.z = obj;
 * const objC = sFunction.clone(obj);
 * console.log(obj === objC); // false
 * console.log(obj == objC); // true
 * console.log(obj.h === objC.h); // false
 * console.log(obj.h == objC.h); // true
 */
declare const deepClone: (value: any) => any;
declare const _default: {
    noop: () => void;
    deepClone: (value: any) => any;
};
export default _default;
export { noop, deepClone };
