import { isTrueValue } from '../Object/index.js';
import { URL as URL$1, isUrl as isUrl$1, isNumber } from '../RegExp/index.js';
import { initArray, isArray, forEach } from '../Array/index.js';
import '../RegExp/password.js';
import '../RegExp/phone.js';

/* eslint-disable no-unused-vars, @typescript-eslint/no-explicit-any */
/**
 * @module sUrl
 * @since 0.0.3
 * @description sUrl模块, 提供数值处理
 * @example
 * // first import sUrl
 * import { sUrl } from 'js-simple-utils'
 * // then use sUrl
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18'); // {name: 's', age: '18'}
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18', 'name'); // 's'
 * sUrl.setUrlParams('http://www.baidu.com', {name: 's', age: '18'}); // 'http://www.baidu.com/?name=s&age=18'
 */
/**
 * 完整url
 * @static
 * @since 0.0.3
 * @constant {RegExp} URL
 * @example
 * sUrl.URL_REGEXP.test('http://www.baidu.com?name=s&age=18'); // true
 */
const URL_REGEXP = URL$1;
const formatVal = (val) => {
    if (isNumber(String(val))) {
        return Number(val);
    }
    if (String(val) === 'true' || String(val) === 'false') {
        return Boolean(val);
    }
    return val;
};
/**
 * 获取url中指定params
 * @static
 * @since 0.0.3
 * @description 若指定params存在， 则返回指定params的值， 否则返回null
 * @param {string} url url
 * @param {?string} name 参数名
 * @returns {string | number | boolean | Array<number | string | boolean> | Record<string, string | number | boolean | Array<number | string | boolean>> | null} 参数值
 * @example
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18'); // {name: 's', age: '18'}
 */
const getUrlParams = (url, name) => {
    let res;
    // 优先浏览器内置API
    if (URLSearchParams !== undefined) {
        const params = new URLSearchParams(new URL(url).search);
        if (isTrueValue(name)) {
            const arr = initArray(params.getAll(name)).map(item => formatVal(item));
            return arr.length === 1 ? arr[0] : arr;
        }
        res = {};
        params.forEach((val, key) => {
            if (Object.prototype.hasOwnProperty.call(res, key)) {
                if (isArray(res[key])) {
                    Array.prototype.push.call(res[key], formatVal(val));
                }
                else {
                    res[key] = Array.from([res[key], formatVal(val)]);
                }
            }
            else {
                res[key] = formatVal(val);
            }
        });
        return res;
    }
    // 暂无完美正则可适配所有场景
    // 正则
    // const arr: Record<string, string | number | boolean>[] = initArray(encodeURI(url).match(/\w+=\w+/gi)).map(
    //     (item: string) => {
    //         const paramArr: string[] = item.split('=')
    //         return { [paramArr[0]]: formatVal(paramArr[1]) }
    //     }
    // )
    // 手动截取
    return parseSearchQuery(url.split('?')[1], name);
};
/**
 * 转换url的params为对象，若指定key，则返回指定key的值，否则返回所有值
 * @param {String} querySearchStr 查询字符串
 * @param {String} key 参数名
 * @returns {Object|string | boolean | number } 参数值
 */
const parseSearchQuery = (querySearchStr, key) => {
    var _a;
    const arr = (_a = querySearchStr
        .substring(querySearchStr.indexOf('?') + 1)
        .split('&')) === null || _a === void 0 ? void 0 : _a.map((item) => {
        const paramArr = item.split('=');
        return { [decodeURIComponent(paramArr[0])]: formatVal(decodeURIComponent(paramArr[1])) };
    });
    let res;
    if (isTrueValue(key)) {
        forEach(arr, (item) => {
            if (Object.prototype.hasOwnProperty.call(item, key)) {
                if (isTrueValue(res)) {
                    if (isArray(res)) {
                        Array.prototype.push.call(res, item[key]);
                    }
                    else {
                        res = [res, item[key]];
                    }
                }
                else {
                    res = item[key];
                }
            }
        });
        return res;
    }
    res = {};
    forEach(arr, (item) => {
        Object.entries(item).forEach(([key, val]) => {
            if (res[key]) {
                if (isArray(res[key])) {
                    Array.prototype.push.call(res[key], val);
                }
                else {
                    res[key] = [res[key], val];
                }
            }
            else {
                res[key] = val;
            }
        });
    });
    return res;
};
/**
 * 转换对象为url拼接的字符串
 * @param {Object} data 对象
 * @returns {String} url拼接的字符串，需自行处理首位符号(?|&)
 */
const stringifySearchQuery = (data = {}) => new URLSearchParams(data).toString();
/**
 * 给url拼接指定params并返回新的url
 * @static
 * @since 0.0.3
 * @description params或者name和value只能传入一个
 * @param {string} url 原始url
 * @param {?Record<string, string | boolean | number | ReadonlyArray<string | boolean | number>>} params 参数对象
 * @param {?string} name 参数名
 * @param {?(string | boolean | number | ReadonlyArray<string | boolean | number>)} value 参数值
 * @returns {string} url 拼接好的url
 * @example
 * sUrl.setUrlParams('http://www.baidu.com', 'name', 'test'); // http://www.baidu.com/?name=test
 * sUrl.setUrlParams('http://www.baidu.com/#123', 'name', 'test'); // http://www.baidu.com/?name=test#123
 * sUrl.setUrlParams('http://www.baidu.com', { name: 'test', value: 'test' }); // http://www.baidu.com/?name=test&value=test
 * sUrl.setUrlParams('http://www.baidu.com', 'name', ['test', '123']); // http://www.baidu.com/?name=test&name=123
 * sUrl.setUrlParams('http://www.baidu.com', { 'name': ['test', '123'] }); // http://www.baidu.com/?name=test&name=123
 */
function setUrlParams(url, ...rest) {
    let params;
    if (rest.length === 1) {
        params = [];
        forEach(Object.entries(rest[0]), ([key, value]) => {
            if (isArray(value)) {
                forEach(value, (item) => {
                    params.push([String(key), String(item)]);
                });
            }
            else {
                params.push([key, value]);
            }
        });
    }
    if (rest.length === 2) {
        if (isArray(rest[1])) {
            params = [];
            forEach(rest[1], (item) => {
                params.push([String(rest[0]), String(item)]);
            });
        }
        else {
            params = [[rest[0], String(rest[1])]];
        }
    }
    const newUrl = new URL(url);
    const { hash, origin, pathname, search } = newUrl;
    return isTrueValue(search)
        ? `${origin + pathname}${search}&${stringifySearchQuery(params)}${hash}`
        : `${origin + pathname}?${stringifySearchQuery(params)}${hash}`;
}
/**
 * 是否是完整url
 * @static
 * @since 0.0.3
 * @function
 * @param {string} url 完整url
 * @returns {boolean} true是/false否
 * @example
 * sUrl.isUrl('http://www.baidu.com'); // true
 */
const isUrl = isUrl$1;
var index = { URL_REGEXP, isUrl, getUrlParams, setUrlParams, parseSearchQuery, stringifySearchQuery };

export { URL_REGEXP, index as default, getUrlParams, isUrl, parseSearchQuery, setUrlParams, stringifySearchQuery };
