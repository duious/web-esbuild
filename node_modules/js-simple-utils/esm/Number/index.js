import { NUMBER as NUMBER$1, isNumber as isNumber$1 } from '../RegExp/index.js';
import { padStart, padEnd } from '../String/index.js';
import '../RegExp/password.js';
import '../RegExp/phone.js';

/**
 * @module sNumber
 * @since 0.0.3
 * @description sNumber模块, 提供数值处理
 * @example
 * // first import sNumber
 * import { sNumber } from 'js-simple-utils'
 * // then use sNumber
 * sNumber.pad0(123, 2); // '123'
 * sNumber.pad0(123, 5); // '00123'
 * sNumber.pad0(123, -5); // '12300'
 */
/**
 * 默认将数值在左侧用0补齐至指定长度，数量为负数时在右侧补齐，也可以自定义补齐的字符
 * @static
 * @since 0.0.3
 * @param {string|number} [string=''] 要补齐的字符串或数值
 * @param {number} [length=1] 待补齐的长度
 * @param {string} [chars='0'] 用于补齐的字符
 * @returns {string} 补齐后的字符串
 * @example
 * sNumber.pad0(1, 2); // '01'
 * sNumber.pad0(12, 4); // '0012'
 * sNumber.pad0(123, -3); // '123000'
 * sNumber.pad0(123, 2, '-'); // '123'
 */
const pad0 = (string, length = 1, chars = '0') => {
    return `${length > 0 ? padStart(String(string), length, chars) : padEnd(String(string), -length, chars)}`;
};
/**
 * 数字 正则表达式
 * @static
 * @since 0.0.3
 * @constant {RegExp} NUMBER
 * @example
 * sNumber.NUMBER.test('123') // true
 */
const NUMBER = NUMBER$1;
/**
 * 是否是正整数
 * @static
 * @since 0.0.3
 * @function
 * @param {string} int 整数
 * @returns {boolean} true是/false否
 * @example
 * sNumber.isNumber('123') // true
 */
const isNumber = isNumber$1;
var index = { NUMBER, pad0, isNumber };

export { NUMBER, index as default, isNumber, pad0 };
