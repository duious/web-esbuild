/**
 * @module sUrl
 * @since 0.0.3
 * @description sUrl模块, 提供数值处理
 * @example
 * // first import sUrl
 * import { sUrl } from 'js-simple-utils'
 * // then use sUrl
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18'); // {name: 's', age: '18'}
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18', 'name'); // 's'
 * sUrl.setUrlParams('http://www.baidu.com', {name: 's', age: '18'}); // 'http://www.baidu.com/?name=s&age=18'
 */
/**
 * 完整url
 * @static
 * @since 0.0.3
 * @constant {RegExp} URL
 * @example
 * sUrl.URL_REGEXP.test('http://www.baidu.com?name=s&age=18'); // true
 */
declare const URL_REGEXP: RegExp;
/**
 * 获取url中指定params
 * @static
 * @since 0.0.3
 * @description 若指定params存在， 则返回指定params的值， 否则返回null
 * @param {string} url url
 * @param {?string} name 参数名
 * @returns {string | number | boolean | Array<number | string | boolean> | Record<string, string | number | boolean | Array<number | string | boolean>> | null} 参数值
 * @example
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18'); // {name: 's', age: '18'}
 */
declare const getUrlParams: (url: string, name?: string) => number | string | boolean | Array<number | string | boolean>[] | Record<string, string | number | boolean | Array<number | string | boolean>[]> | null;
/**
 * 转换url的params为对象，若指定key，则返回指定key的值，否则返回所有值
 * @param {String} querySearchStr 查询字符串
 * @param {String} key 参数名
 * @returns {Object|string | boolean | number } 参数值
 */
declare const parseSearchQuery: (querySearchStr: string, key?: string) => any;
/**
 * 转换对象为url拼接的字符串
 * @param {Object} data 对象
 * @returns {String} url拼接的字符串，需自行处理首位符号(?|&)
 */
declare const stringifySearchQuery: (data?: {}) => string;
/**
 * 给url拼接指定params并返回新的url
 * @static
 * @since 0.0.3
 * @param {string} url 原始url
 * @param {Record<string, string | boolean | number | ReadonlyArray<string | boolean | number>>} params 参数对象
 * @returns {string} url 拼接好的url
 * @example
 * sUrl.setUrlParams('http://www.baidu.com', {name: 's', age: '18'}); // 'http://www.baidu.com/?name=s&age=18'
 */
declare function setUrlParams(url: string, params: Record<string, string | boolean | number | ReadonlyArray<string | boolean | number>>): string;
/**
 * 给url拼接指定params并返回新的url
 * @static
 * @since 0.0.3
 * @param {string} url 原始url
 * @param {string} name 参数名
 * @param {string | boolean | number | ReadonlyArray<string | boolean | number>} params 参数值
 * @returns {string} url 拼接好的url
 * @example
 * sUrl.setUrlParams('http://www.baidu.com', 'name', 's'); // 'http://www.baidu.com/?name=s'
 */
declare function setUrlParams(url: string, name: string, value: string | boolean | number | ReadonlyArray<string | boolean | number>): string;
/**
 * 是否是完整url
 * @static
 * @since 0.0.3
 * @function
 * @param {string} url 完整url
 * @returns {boolean} true是/false否
 * @example
 * sUrl.isUrl('http://www.baidu.com'); // true
 */
declare const isUrl: (url: string) => boolean;
declare const _default: {
    URL_REGEXP: RegExp;
    isUrl: (url: string) => boolean;
    getUrlParams: (url: string, name?: string) => string | number | boolean | (string | number | boolean)[][] | Record<string, string | number | boolean | (string | number | boolean)[][]>;
    setUrlParams: typeof setUrlParams;
    parseSearchQuery: (querySearchStr: string, key?: string) => any;
    stringifySearchQuery: (data?: {}) => string;
};
export default _default;
export { URL_REGEXP, isUrl, getUrlParams, setUrlParams, parseSearchQuery, stringifySearchQuery };
