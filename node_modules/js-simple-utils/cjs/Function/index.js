'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Object_index = require('../Object/index.js');
var Array_index = require('../Array/index.js');
var RegExp_index = require('../RegExp/index.js');
require('../RegExp/password.js');
require('../RegExp/phone.js');

/* eslint-disable @typescript-eslint/no-explicit-any, no-multi-assign */
/**
 * @module sFunction
 * @since 0.0.3
 * @description sFunction模块, 提供函数相关/独立函数处理
 * @example
 * // first import sFunction
 * import { sFunction } from 'js-simple-utils'
 * // then use sFunction
 * sFunction.isTrueValue('123@gmail.com'); // true
 */
/**
 * 空函数
 * @static
 * @since 0.0.3
 * @returns {void}
 */
// eslint-disable-next-line prettier/prettier, @typescript-eslint/no-empty-function
const noop = () => { };
// 此处仅适用于深拷贝函数使用
function isObject(value) {
    return value != null && (typeof value == 'object' || typeof value == 'function');
}
/**
 * 深拷贝
 * @static
 * @since 0.0.3
 * @description 使用广度优先方式进行深拷贝，已支持类型：非对象、数组、对象、正则、日期、Symbol、Map、Set<br>
 * 对于一般js对象或后端返回数据可放心使用<br>
 * 若待拷贝对象内包含函数，慎用
 * @param {any} value 待拷贝的值
 * @returns {any} 拷贝后的值
 * @example
 * const obj = { a:1, b:true, c: new Date(), d: new Map(), e: new Set(), f: /\d+/g, g: [1,2,3], h: { i:1 } };
 * obj.z = obj;
 * const objC = sFunction.clone(obj);
 * console.log(obj === objC); // false
 * console.log(obj == objC); // true
 * console.log(obj.h === objC.h); // false
 * console.log(obj.h == objC.h); // true
 */
const deepClone = (value) => {
    if (!isObject(value)) {
        return value;
    }
    // 浏览器内置API
    // https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
    if (Object_index.isTrueValue((window || global || globalThis).structuredClone)) {
        return structuredClone(value);
    }
    // 处理根为 {} | [] 类型的对象
    const root = Object.prototype.toString.call(value) == Object_index.OBJECT_TYPE.array
        ? new value.constructor(value)
        : Object.create(Object.getPrototypeOf(value));
    const weekMap = new WeakMap();
    weekMap.set(value, root);
    // 栈
    const loopList = [
        {
            parent: root,
            key: undefined,
            data: value,
        },
    ];
    while (loopList.length) {
        // 广度优先
        const node = loopList.pop();
        const parent = node.parent;
        const key = node.key;
        const data = node.data;
        // 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素
        let res = parent;
        if (Object_index.isTrueValue(key)) {
            // eslint-disable-next-line default-case
            switch (Object.prototype.toString.call(data)) {
                case Object_index.OBJECT_TYPE.map:
                case Object_index.OBJECT_TYPE.set:
                case Object_index.OBJECT_TYPE.array:
                    if (weekMap.has(data)) {
                        const d = weekMap.get(data);
                        res = parent[key] = new d.constructor(d);
                    }
                    else {
                        res = parent[key] = new data.constructor(data);
                    }
                    break;
                case Object_index.OBJECT_TYPE.symbol: // Symbol 类型
                    res = parent[key] = Object(Symbol.prototype.valueOf.call(data)) || {};
                    break;
                case Object_index.OBJECT_TYPE.date: // Date 类型
                    res = parent[key] = new Date(data.getTime());
                    break;
                case Object_index.OBJECT_TYPE.regexp: // RegExp 类型
                    res = parent[key] = RegExp_index.cloneRegExp(data);
                    break;
                default:
                    if (weekMap.has(data)) {
                        parent[key] = weekMap.get(data);
                        // eslint-disable-next-line no-continue
                        continue;
                    }
                    res = parent[key] = Object.create(Object.getPrototypeOf(data));
                    // 避免死循环
                    weekMap.set(data, res);
            }
        }
        for (const k in data) {
            if (Object.prototype.hasOwnProperty.call(data, k)) {
                if (isObject(data[k])) {
                    // 避免死循环
                    if (weekMap.has(data[k])) {
                        res[k] = weekMap.get(data[k]);
                        // eslint-disable-next-line no-continue
                        continue;
                    }
                    // 下一次循环
                    loopList.push({
                        parent: res,
                        key: k,
                        data: data[k],
                    });
                }
                else {
                    // eslint-disable-next-line default-case
                    switch (Object.prototype.toString.call(data)) {
                        case Object_index.OBJECT_TYPE.map:
                            Map.prototype.set.call(res, k, data[k]);
                            break;
                        case Object_index.OBJECT_TYPE.set:
                            Set.prototype.add.call(res, data[k]);
                            break;
                        case Object_index.OBJECT_TYPE.array:
                            if (!Array_index.isArray(res)) {
                                res = Array_index.initArray(res);
                            }
                            res[k] = data[k];
                            break;
                        case Object_index.OBJECT_TYPE.symbol: // Symbol 类型
                            // TODO
                            break;
                        default:
                            res[k] = weekMap.has(data[k]) ? weekMap.get(data[k]) : data[k];
                    }
                }
            }
        }
    }
    return root;
};
var index = { noop, deepClone };

exports.deepClone = deepClone;
exports["default"] = index;
exports.noop = noop;
