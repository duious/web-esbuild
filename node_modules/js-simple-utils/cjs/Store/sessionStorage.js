'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * @module sSessionStorage
 * @since 0.0.1
 * @description sSessionStorage模块, 存储键值到sessionStorage, 提供对应操作后的结果状态, 并提供相关操作
 * @example
 * // first import sSessionStorage
 * import { sSessionStorage } from 'js-simple-utils'
 * // then use sSessionStorage
 * sSessionStorage.setItem('key', 'value')
 */
/**
 * 最大可存储长度
 * @constant {number} MAX_SIZE
 * @static
 * @since 0.0.1
 * @type {number}
 * @default 5 * 1024 * 1024
 */
const MAX_SIZE = 5 * 1024 * 1024;
/**
 * 增加sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @param {any} val 键值
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.setItem('key', 'value')
 */
const setItem = (key, val) => {
    if (!key)
        return false;
    if (Object.prototype.toString.call(val) === '[object Object]') {
        val = JSON.stringify(val);
    }
    if (isFull(key, val)) {
        return false;
    }
    window.sessionStorage.setItem(key, val);
    return isItemExist(key);
};
/**
 * 删除sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.delItem('key')
 */
const delItem = (key) => {
    if (!key)
        return false;
    window.sessionStorage.removeItem(key);
    return !isItemExist(key);
};
/**
 * 获取sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {null | string}
 * @example
 * sSessionStorage.getItem('key')
 */
const getItem = (key) => {
    if (!key)
        return null;
    return window.sessionStorage.getItem(key);
};
/**
 * 检查sessionStorage键值是否存在
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true存在 false不存在
 * @example
 * sSessionStorage.isItemExist('key')
 */
const isItemExist = (key) => {
    return !!getItem(key);
};
/**
 * 清理sessionStorage全部键值
 * @static
 * @since 0.0.1
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.clear()
 */
const clear = () => {
    window.sessionStorage.clear();
    return getSize() === 0;
};
/**
 * 获取sessionStorage已存储键数量
 * @static
 * @since 0.0.1
 * @return {number} sessionStorage已存储键数量
 * @example
 * sSessionStorage.getLength()
 */
const getLength = () => {
    return window.sessionStorage.length;
};
/**
 * 获取sessionStorage已存储键值大小
 * @static
 * @since 0.0.1
 * @returns {number} 返回sessionStorage已存储键值长度单位为字节
 * @example
 * sSessionStorage.getSize()
 */
const getSize = () => {
    let size = 0;
    const obj = window.sessionStorage;
    for (const item in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, item)) {
            size += obj.getItem(item).length;
        }
    }
    return size;
};
/**
 * 是否已超出最大存储长度
 * @static
 * @since 0.0.1
 * @param {?string} key 键名
 * @param {?string} val 键值
 * @returns {boolean} true已满 false未满
 * @example
 * sSessionStorage.isFull('key', 'value')
 */
const isFull = (key, val) => {
    if (val) {
        return val.length + getSize() >= MAX_SIZE;
    }
    return getSize() >= MAX_SIZE;
};
var sessionStorage = { setItem, delItem, getItem, isItemExist, clear, getLength, getSize, isFull };

exports.clear = clear;
exports["default"] = sessionStorage;
exports.delItem = delItem;
exports.getItem = getItem;
exports.getLength = getLength;
exports.getSize = getSize;
exports.isFull = isFull;
exports.isItemExist = isItemExist;
exports.setItem = setItem;
