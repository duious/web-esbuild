'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * @module sStore
 * @since 0.0.1
 * @description sStore模块
 */
var sStore = {};

/**
 * @module sCookie
 * @since 0.0.1
 */
/**
 * 设置cookie键值
 * @static
 * @since 0.0.1
 * @description 时间默认1天
 * @param  {string} key cookie名称
 * @param  {string} val cookie值
 * @param  {?number} [expires=1 * 24 * 60 * 60] cookie过期时间 单位秒 默认1天过期
 * @param  {?string} [path='/'] cookie路径
 * @param  {?string} [domain=''] cookie域名
 * @param  {?boolean} [secure=''] cookie安全标识
 * @param  {?('' | 'strict' | 'lax')} [sameSite=''] cookie同源标识
 * @return {boolean} true成功/false失败
 * @example
 * sCookie.setItem('name', 's')
 * sCookie.setItem('name', 's', 1 * 24 * 60 * 60)
 * sCookie.setItem('name', 's', 1 * 24 * 60 * 60, '/')
 */
const setItem$2 = (key, val, expires, path, domain, secure, sameSite) => {
    const date = new Date(); // 获取当前时间
    // 过期时间
    date.setTime(date.getTime() + (expires || 1 * 24 * 60 * 60) * 1000);
    if (Object.prototype.toString.call(val) === '[object Object]') {
        val = JSON.stringify(val);
    }
    // 设置cookie
    // eslint-disable-next-line prettier/prettier
    document.cookie = `${key}=${encodeURI(val)};expires=${Date.prototype.toUTCString.call(date)};path=${path || '/'};domain=${domain || ''};secure=${secure || false};sameSite=${sameSite || ''}`;
    return getItem$2(key) === val;
};
/**
 * 获取cookie键值
 * @static
 * @since 0.0.1
 * @param  {string} key cookie键名
 * @return {undefined | string} cookie值
 * @example
 * sCookie.getItem('name')
 */
const getItem$2 = (key) => {
    var _a;
    return (_a = document.cookie.match(new RegExp(`(^| )${key}=([^;]*)(;|$)`))) === null || _a === void 0 ? void 0 : _a[2];
};
/**
 * 删除cookie键值
 * @static
 * @since 0.0.1
 * @param  {string} key cookie键名
 * @return {boolean} true成功/false失败
 * @example
 * sCookie.delItem('name')
 */
const delItem$2 = (key) => {
    document.cookie = `${key}=;expires = ${Date.prototype.toUTCString.call(new Date(0))}`;
    return !getItem$2(key);
};
var cookie = { setItem: setItem$2, getItem: getItem$2, delItem: delItem$2 };

/**
 * @module sLocalStorage
 * @since 0.0.1
 * @description sLocalStorage模块, 存储键值到localStorage, 提供对应操作后的结果状态, 并提供相关操作
 * @example
 * // first import sLocalStorage
 * import { sLocalStorage } from 'js-simple-utils'
 * // then use sLocalStorage
 * sLocalStorage.setItem('key', 'value')
 */
/**
 * 最大可存储长度
 * @constant {number} MAX_SIZE
 * @static
 * @since 0.0.1
 * @default 5 * 1024 * 1024
 */
const MAX_SIZE$1 = 5 * 1024 * 1024;
/**
 * 增加localStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @param {any} val 键值
 * @return {boolean} true成功/false失败
 * @example
 * sLocalStorage.setItem('key', 'value')
 */
const setItem$1 = (key, val) => {
    if (!key)
        return false;
    if (Object.prototype.toString.call(val) === '[object Object]') {
        val = JSON.stringify(val);
    }
    if (isFull$1(key, val)) {
        return false;
    }
    window.localStorage.setItem(key, val);
    return isItemExist$1(key);
};
/**
 * 删除localStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true成功/false失败
 * @example
 * sLocalStorage.delItem('key')
 */
const delItem$1 = (key) => {
    if (!key)
        return false;
    window.localStorage.removeItem(key);
    return !isItemExist$1(key);
};
/**
 * 获取localStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {null | string | number | boolean}
 * @example
 * sLocalStorage.getItem('key')
 */
const getItem$1 = (key) => {
    if (!key)
        return null;
    return window.localStorage.getItem(key);
};
/**
 * 检查localStorage键值是否存在
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true存在 false不存在
 * @example
 * sLocalStorage.isItemExist('key')
 */
const isItemExist$1 = (key) => {
    return !!getItem$1(key);
};
/**
 * 清理localStorage全部键值
 * @static
 * @since 0.0.1
 * @return {boolean} true成功/false失败
 * @example
 * sLocalStorage.clear()
 */
const clear$1 = () => {
    window.localStorage.clear();
    return getSize$1() === 0;
};
/**
 * 获取localStorage已存储键数量
 * @static
 * @since 0.0.1
 * @return {number} localStorage已存储键数量
 * @example
 * sLocalStorage.getLength()
 */
const getLength$1 = () => {
    return window.localStorage.length;
};
/**
 * 获取localStorage已存储键值大小
 * @static
 * @since 0.0.1
 * @returns {number} 返回localStorage已存储键值长度单位为字节
 * @example
 * sLocalStorage.getSize()
 */
const getSize$1 = () => {
    let size = 0;
    const obj = window.localStorage;
    for (const item in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, item)) {
            size += obj.getItem(item).length;
        }
    }
    return size;
};
/**
 * 是否已超出最大存储长度
 * @static
 * @since 0.0.1
 * @param {?string} key 键名
 * @param {?string} val 键值
 * @returns {boolean} true已满 false未满
 * @example
 * sLocalStorage.isFull('key', 'value')
 * sLocalStorage.isFull()
 */
const isFull$1 = (key, val) => {
    if (val) {
        return val.length + getSize$1() >= MAX_SIZE$1;
    }
    return getSize$1() >= MAX_SIZE$1;
};
var localStorage = { setItem: setItem$1, delItem: delItem$1, getItem: getItem$1, clear: clear$1, getLength: getLength$1, isItemExist: isItemExist$1, isFull: isFull$1 };

/**
 * @module sSessionStorage
 * @since 0.0.1
 * @description sSessionStorage模块, 存储键值到sessionStorage, 提供对应操作后的结果状态, 并提供相关操作
 * @example
 * // first import sSessionStorage
 * import { sSessionStorage } from 'js-simple-utils'
 * // then use sSessionStorage
 * sSessionStorage.setItem('key', 'value')
 */
/**
 * 最大可存储长度
 * @constant {number} MAX_SIZE
 * @static
 * @since 0.0.1
 * @type {number}
 * @default 5 * 1024 * 1024
 */
const MAX_SIZE = 5 * 1024 * 1024;
/**
 * 增加sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @param {any} val 键值
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.setItem('key', 'value')
 */
const setItem = (key, val) => {
    if (!key)
        return false;
    if (Object.prototype.toString.call(val) === '[object Object]') {
        val = JSON.stringify(val);
    }
    if (isFull(key, val)) {
        return false;
    }
    window.sessionStorage.setItem(key, val);
    return isItemExist(key);
};
/**
 * 删除sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.delItem('key')
 */
const delItem = (key) => {
    if (!key)
        return false;
    window.sessionStorage.removeItem(key);
    return !isItemExist(key);
};
/**
 * 获取sessionStorage键值
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {null | string}
 * @example
 * sSessionStorage.getItem('key')
 */
const getItem = (key) => {
    if (!key)
        return null;
    return window.sessionStorage.getItem(key);
};
/**
 * 检查sessionStorage键值是否存在
 * @static
 * @since 0.0.1
 * @param {string} key 键名
 * @return {boolean} true存在 false不存在
 * @example
 * sSessionStorage.isItemExist('key')
 */
const isItemExist = (key) => {
    return !!getItem(key);
};
/**
 * 清理sessionStorage全部键值
 * @static
 * @since 0.0.1
 * @return {boolean} true成功/false失败
 * @example
 * sSessionStorage.clear()
 */
const clear = () => {
    window.sessionStorage.clear();
    return getSize() === 0;
};
/**
 * 获取sessionStorage已存储键数量
 * @static
 * @since 0.0.1
 * @return {number} sessionStorage已存储键数量
 * @example
 * sSessionStorage.getLength()
 */
const getLength = () => {
    return window.sessionStorage.length;
};
/**
 * 获取sessionStorage已存储键值大小
 * @static
 * @since 0.0.1
 * @returns {number} 返回sessionStorage已存储键值长度单位为字节
 * @example
 * sSessionStorage.getSize()
 */
const getSize = () => {
    let size = 0;
    const obj = window.sessionStorage;
    for (const item in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, item)) {
            size += obj.getItem(item).length;
        }
    }
    return size;
};
/**
 * 是否已超出最大存储长度
 * @static
 * @since 0.0.1
 * @param {?string} key 键名
 * @param {?string} val 键值
 * @returns {boolean} true已满 false未满
 * @example
 * sSessionStorage.isFull('key', 'value')
 */
const isFull = (key, val) => {
    if (val) {
        return val.length + getSize() >= MAX_SIZE;
    }
    return getSize() >= MAX_SIZE;
};
var sessionStorage = { setItem, delItem, getItem, isItemExist, clear, getLength, getSize, isFull };

/**
 * @module sRegExp.password
 * @since 0.0.2
 * @description sRegExp模块, 提供正则表达式
 */
/**
 * 密码
 * @static
 * @since 0.0.2
 * @description 基础密码，6位数字
 * @constant {RegExp} PASSWORD
 * @example
 * sRegExp.PASSWORD.test('123456')
 */
const PASSWORD$1 = /^\d{6,}$/;
/**
 * 密码
 * @static
 * @since 0.0.2
 * @description 基础密码，4位数字
 * @constant {RegExp} PASSWORD_NUM_4
 * @example
 * sRegExp.PASSWORD_NUM_4.test('1234')
 */
const PASSWORD_NUM_4$1 = /^\d{4,}$/;
/**
 * 密码
 * @static
 * @since 0.0.2
 * @description 基础密码，6位数字
 * @constant {RegExp} PASSWORD_NUM_6
 * @example
 * sRegExp.PASSWORD_NUM_6.test('123456')
 */
const PASSWORD_NUM_6$1 = /^\d{6,}$/;
/**
 * 密码
 * @static
 * @since 0.0.2
 * @description 复杂密码，6～16位
 * @constant {RegExp} PASSWORD_ALL_6_16
 * @example
 * sRegExp.PASSWORD_ALL_6_16.test('123456')
 */
const PASSWORD_ALL_6_16$1 = /^[\x21-\x7E]{6,16}$/;
/**
 * 判断是否是密码
 * @static
 * @since 0.0.2
 * @param {string} password 密码
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPassword('123456')
 */
const isPassword$1 = (password) => PASSWORD$1.test(password);
/**
 * 判断是否是密码
 * @static
 * @since 0.0.2
 * @description 基础密码，4位数字
 * @param {string} password 密码
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPasswordNum4('1234')
 */
const isPasswordNum4$1 = (password) => PASSWORD_NUM_4$1.test(password);
/**
 * 判断是否是密码
 * @static
 * @since 0.0.2
 * @description 基础密码，6位数字
 * @param {string} password 密码
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPasswordNum6('123456')
 */
const isPasswordNum6$1 = (password) => PASSWORD_NUM_6$1.test(password);
/**
 * 判断是否是密码
 * @static
 * @since 0.0.2
 * @description 复杂密码，6～16位
 * @param {string} password 密码
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPasswordAll6To16('123456')
 */
const isPasswordAll6To16$1 = (password) => PASSWORD_ALL_6_16$1.test(password);
var password = {
    PASSWORD: PASSWORD$1,
    PASSWORD_NUM_4: PASSWORD_NUM_4$1,
    PASSWORD_NUM_6: PASSWORD_NUM_6$1,
    PASSWORD_ALL_6_16: PASSWORD_ALL_6_16$1,
    isPassword: isPassword$1,
    isPasswordNum4: isPasswordNum4$1,
    isPasswordNum6: isPasswordNum6$1,
    isPasswordAll6To16: isPasswordAll6To16$1,
};

/* eslint-disable no-useless-escape */
/**
 * @module sRegExp.phone
 * @since 0.0.2
 * @description sRegExp模块, 提供正则表达式
 */
/**
 * 手机号
 * @static
 * @since 0.0.2
 * @description 中国大陆手机号
 * @constant {RegExp} PHONE
 * @example
 * sRegExp.PHONE.test('13800138000')
 */
const PHONE$1 = /^1[3-9]\d{9}$/;
/**
 * 手机号
 * @static
 * @since 0.0.2
 * @description 中国大陆手机号含有区号
 * @constant {RegExp} PHONE_86
 * @example
 * sRegExp.PHONE_86.test('+8613800138000')
 */
const PHONE_86$1 = /^((\+86)|(86))?[1][3-9]\d{9}$/;
/**
 * 手机号
 * @static
 * @since 0.0.2
 * @description 其他国家手机号含有区号
 * @constant {RegExp} PHONE_OTHER
 * @example
 * sRegExp.PHONE_OTHER.test('+8613800138000')
 */
const PHONE_OTHER$1 = /^((([\(\（]\+?\d{2,6}[\)\）])|(\+?\d{2,6}))-?)?(([\(\（]\d{6,12}[\)\）])|(\d{6,12}))$/;
/**
 * 判断是否是手机号
 * @static
 * @since 0.0.2
 * @param {string} phone 手机号
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPhone('13800138000')
 */
const isPhone$1 = (phone) => PHONE$1.test(phone);
/**
 * 判断是否是手机号
 * @static
 * @since 0.0.2
 * @param {string} phone 手机号
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPhone86('+8613800138000')
 */
const isPhone86$1 = (phone) => PHONE_86$1.test(phone);
/**
 * 判断是否是手机号
 * @static
 * @since 0.0.2
 * @param {string} phone 手机号
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPhoneOther('+8613800138000')
 */
const isPhoneOther$1 = (phone) => PHONE_OTHER$1.test(phone);
var phone = { PHONE: PHONE$1, PHONE_86: PHONE_86$1, PHONE_OTHER: PHONE_OTHER$1, isPhone: isPhone$1, isPhone86: isPhone86$1, isPhoneOther: isPhoneOther$1 };

/* eslint-disable no-useless-escape */
/**
 * @module sRegExp
 * @since 0.0.1
 * @description sRegExp模块, 提供正则表达式
 * @example
 * // first import sRegExp
 * import { sRegExp } from 'js-simple-utils'
 * // then use sRegExp
 * sRegExp.isEmail('123@gmail.com')
 * sRegExp.EMAIL.test('123@gmail.com')
 */
const { PASSWORD, PASSWORD_NUM_4, PASSWORD_NUM_6, PASSWORD_ALL_6_16, isPassword, isPasswordNum4, isPasswordNum6, isPasswordAll6To16, } = password;
const { PHONE, PHONE_86, PHONE_OTHER, isPhone, isPhone86, isPhoneOther } = phone;
/**
 * 电子邮件
 * @static
 * @since 0.0.2
 * @constant {RegExp} EMAIL
 * @example
 * sRegExp.EMAIL.test('123@qq.com')
 */
const EMAIL = /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/;
/**
 * 日期字符串
 * @inner
 * @since 0.0.2
 * @constant {RegExp} DATE_STRING
 * @example
 * 2022-01-01 00:00:00
 * 2022-01-01 00.00.00
 * 2022/01/01 00:00:00
 * 2022/01/01 00.00.00
 * sRegExp.DATE_STRING.test(item) // true
 */
const DATE_STRING = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/;
/**
 * 日期字符串格式化模版
 * @inner
 * @since 0.0.2
 * @constant {RegExp} DATE_STRING_FORMAT
 * @example
 * sRegExp.DATE_STRING_FORMAT.test(item) // true
 */
const DATE_STRING_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;
/**
 * 邮编
 * @static
 * @since 0.0.2
 * @constant {RegExp} POST_CODE
 * @example
 * sRegExp.POST_CODE.test('123456') // true
 */
const POST_CODE = /^\d+$/;
/**
 * 数字
 * @static
 * @since 0.0.2
 * @constant {RegExp} NUMBER
 * @example
 * sRegExp.NUMBER.test('123') // true
 */
const NUMBER$1 = /^\d+$/;
/**
 * 正整数
 * @static
 * @since 0.0.2
 * @constant {RegExp} INTEGER
 * @example
 * sRegExp.INTEGER.test('123') // true
 */
const INTEGER = /^(([1-9]\d*)|0)$/;
/**
 * 完整url
 * @static
 * @since 0.0.2
 * @constant {RegExp} URL
 * @example
 * sRegExp.URL.test('https://www.baidu.com') // true
 */
const URL$1 = /^(?:(?:ht|f)tp(?:s?)\:\/\/|~\/|\/)?(?:\w+:\w+@)?((?:(?:[-\w\d{1-3}]+\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\.uk|ac\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2}))|((\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)(\.(\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)){3}))(?::[\d]{1,5})?(?:(?:(?:\/(?:[-\w~!$+|.,=]|%[a-f\d]{2})+)+|\/)+|\?|#)?(?:(?:\?(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)(?:&(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)*)*(?:#(?:[-\w~!$ |\/.,*:;=]|%[a-f\d]{2})*)?$/i;
/**
 * 是否是电子邮件
 * @static
 * @since 0.0.2
 * @param {string} email 字符串
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isEmail('123@qq.com') // true
 */
const isEmail = (email) => EMAIL.test(email);
/**
 * 是否是邮编
 * @static
 * @since 0.0.2
 * @param {number} postCode 字符串
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPostCode('123456') // true
 */
const isPostCode = (postCode) => POST_CODE.test(postCode);
/**
 * 判断是否是数字
 * @static
 * @since 0.0.2
 * @param {string} number 数字
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isNumber('123') // true
 */
const isNumber$1 = (number) => NUMBER$1.test(number);
/**
 * 是否是正整数
 * @static
 * @since 0.0.2
 * @param {string} int 整数
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isInteger('123') // true
 */
const isInteger = (int) => INTEGER.test(int);
/**
 * 是否是完整url
 * @static
 * @since 0.0.2
 * @param {string} url 完整url
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isUrl('https://www.baidu.com') // true
 */
const isUrl$1 = (url) => URL$1.test(url);
/**
 * 复制正则表达式
 * @static
 * @since 0.0.3
 * @param {Object} regexp 正则表达式
 * @returns {Object} 正则表达式
 * @example
 * sRegExp.cloneRegExp(/^a/i) // /^a/i
 */
const cloneRegExp = (regexp) => {
    const result = new regexp.constructor(regexp.source, /\w*$/.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
};
var index$8 = {
    // password
    PASSWORD,
    PASSWORD_NUM_4,
    PASSWORD_NUM_6,
    PASSWORD_ALL_6_16,
    cloneRegExp,
    isPassword,
    isPasswordNum4,
    isPasswordNum6,
    isPasswordAll6To16,
    // phone
    PHONE,
    PHONE_86,
    PHONE_OTHER,
    isPhone,
    isPhone86,
    isPhoneOther,
    //
    EMAIL,
    POST_CODE,
    NUMBER: NUMBER$1,
    INTEGER,
    URL: URL$1,
    isEmail,
    isPostCode,
    isNumber: isNumber$1,
    isInteger,
    isUrl: isUrl$1,
};

/**
 * @module sDate
 * @inner
 * @since 0.0.2
 */
const locale = {
    zh: {
        name: 'zh',
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        ordinal: (number, period) => {
            switch (period) {
                case 'W':
                    return `${number}周`;
                default:
                    return `${number}日`;
            }
        },
        weekStart: 1,
        yearStart: 4,
        formats: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah点mm分',
            LLLL: 'YYYY年M月D日ddddAh点mm分',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        relativeTime: {
            future: '%s后',
            past: '%s前',
            s: '几秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年',
        },
        meridiem: (hour, minute) => {
            const hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            }
            if (hm < 900) {
                return '早上';
            }
            if (hm < 1100) {
                return '上午';
            }
            if (hm < 1300) {
                return '中午';
            }
            if (hm < 1800) {
                return '下午';
            }
            return '晚上';
        },
    },
    en: {
        name: 'en',
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    },
};

/**
 * @module sDate
 * @since 0.0.2
 * @description sDate模块, 提供正则表达式
 * @example
 * // first import sDate
 * import { sDate } from 'js-simple-utils'
 * // then use sDate
 * sDate.format(new Date(), 'YYYY-MM-DD')
 * sDate.format(new Date(), 'YYYY-MM-DD HH:mm:ss')
 * sDate.format(new Date())
 */
const INVALID_DATE_STRING = 'Invalid Date';
const FORMAT_DEFAULT = 'YYYY-MM-DD HH:mm:ss';
/**
 * @private
 * @param date
 * @returns {string}
 */
const padZoneStr = (date) => {
    const negMinutes = Math.round(date.getTimezoneOffset() / 15) * 15;
    const minutes = Math.abs(negMinutes);
    const hourOffset = Math.floor(minutes / 60);
    const minuteOffset = minutes % 60;
    return `${negMinutes <= 0 ? '+' : '-'}${padStart$1(hourOffset, 2, '0')}:${padStart$1(minuteOffset, 2, '0')}`;
};
/**
 * 日期解析
 * @static
 * @param date
 * @param utc
 * @returns {Date}
 */
const parseDate = (date, utc) => {
    if (undefined === date || date === null || date === 'undefined' || date === 'null')
        return new Date(); // today
    if (date instanceof Date)
        return new Date(date);
    if (typeof date === 'string' && !/Z$/i.test(date)) {
        const d = date.match(DATE_STRING);
        if (d) {
            const m = Number(d[2]) - 1 || 0;
            const ms = Number(`${d[7] || '0'}`.substring(0, 3));
            if (utc) {
                return new Date(Date.UTC(Number(d[1]), m, Number(d[3] || 1), Number(d[4] || 0), Number(d[5] || 0), Number(d[6] || 0), ms));
            }
            return new Date(Number(d[1]), m, Number(d[3] || 1), Number(d[4] || 0), Number(d[5] || 0), Number(d[6] || 0), ms);
        }
    }
    return new Date(date);
};
/**
 * 补全日期
 * @private
 * @param string
 * @param length
 * @param pad
 * @returns {string}
 */
const padStart$1 = (string, length, pad) => {
    const s = String(string);
    if (!s || s.length >= length)
        return s;
    return `${Array(length + 1 - s.length).join(pad)}${string}`;
};
/**
 * 日期格式化
 * @static
 * @since 0.0.2
 * @param {?string} date 待格式化的日期
 * @param {?string} template 格式化模版
 * @param {?string} loc 语言
 * @returns {string} 格式化后的日期
 * @example
 * sDate.format(new Date(), 'YYYY-MM-DD') // => '2020-01-01'
 */
const format = (date, template = FORMAT_DEFAULT, loc = 'zh') => {
    const d = parseDate(date);
    if (d.toString() === INVALID_DATE_STRING)
        return INVALID_DATE_STRING;
    const zoneStr = padZoneStr(d);
    const $y = d.getFullYear();
    const $M = d.getMonth();
    const $D = d.getDate();
    const $W = d.getDay();
    const $H = d.getHours();
    const $m = d.getMinutes();
    const $s = d.getSeconds();
    const $ms = d.getMilliseconds();
    const { weekdays, weekdaysShort, months, monthsShort, meridiem, weekdaysMin } = locale[loc];
    const getShort = (arr, index, full, length) => (arr && arr[index]) || full[index].substr(0, length);
    const get$H = (num) => padStart$1($H % 12 || 12, num, '0');
    const meridiemFunc = meridiem ||
        ((hour, minute, isLowercase) => {
            const m = hour < 12 ? 'AM' : 'PM';
            return isLowercase ? m.toLowerCase() : m;
        });
    const matches = {
        YY: String($y).slice(-2),
        YYYY: $y,
        M: $M + 1,
        MM: padStart$1($M + 1, 2, '0'),
        MMM: getShort(monthsShort, $M, months, 3),
        MMMM: getShort(months, $M),
        D: $D,
        DD: padStart$1($D, 2, '0'),
        d: String($W),
        dd: getShort(weekdaysMin, $W, weekdays, 2),
        ddd: getShort(weekdaysShort, $W, weekdays, 3),
        dddd: weekdays[$W],
        H: String($H),
        HH: padStart$1($H, 2, '0'),
        h: get$H(1),
        hh: get$H(2),
        a: meridiemFunc($H, $m, true),
        A: meridiemFunc($H, $m, false),
        m: String($m),
        mm: padStart$1($m, 2, '0'),
        s: String($s),
        ss: padStart$1($s, 2, '0'),
        SSS: padStart$1($ms, 3, '0'),
        Z: zoneStr, // 'ZZ' logic below
    };
    return template.replace(DATE_STRING_FORMAT, (match, $1) => $1 || matches[match] || zoneStr.replace(':', ''));
};
var index$7 = { parseDate, format };

/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * @module sObject
 * @since 0.0.3
 * @description sObject模块, 提供对象处理
 * @example
 * // first import sObject
 * import { sObject } from 'js-simple-utils'
 * // then use sObject
 * sObject.isTrueValue('123@gmail.com'); // true
 * sObject.isTrueValue(123); // true
 * sObject.isTrueValue([]]); // false
 */
/**
 * 对象类型枚举
 * @enum {string}
 * @static
 * @since 0.0.3
 */
const OBJECT_TYPE = {
    args: '[object Arguments]',
    array: '[object Array]',
    async: '[object AsyncFunction]',
    bool: '[object Boolean]',
    date: '[object Date]',
    domExc: '[object DOMException]',
    error: '[object Error]',
    func: '[object Function]',
    gen: '[object GeneratorFunction]',
    map: '[object Map]',
    number: '[object Number]',
    null: '[object Null]',
    object: '[object Object]',
    promise: '[object Promise]',
    proxy: '[object Proxy]',
    regexp: '[object RegExp]',
    set: '[object Set]',
    string: '[object String]',
    symbol: '[object Symbol]',
    undefined: '[object Undefined]',
    weakMap: '[object WeakMap]',
    weakSet: '[object WeakSet]',
    arrayBuffer: '[object ArrayBuffer]',
    dataView: '[object DataView]',
    float32: '[object Float32Array]',
    float64: '[object Float64Array]',
    int8: '[object Int8Array]',
    int16: '[object Int16Array]',
    int32: '[object Int32Array]',
    uint8: '[object Uint8Array]',
    uint8Clamped: '[object Uint8ClampedArray]',
    uint16: '[object Uint16Array]',
    uint32: '[object Uint32Array]',
};
/**
 * 不可克隆属性类型
 * @static
 * @since 0.0.3
 */
const UN_CLONE_ABLE_TYPE = [OBJECT_TYPE.error, OBJECT_TYPE.func, OBJECT_TYPE.weakMap];
/**
 * 判断对象是否为真值
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是真值, false: 不是真值
 * @example
 * sObject.isTrueValue(item)
 */
const isTrueValue = (obj) => {
    switch (Object.prototype.toString.call(obj)) {
        case OBJECT_TYPE.object:
            return Object.keys(obj).length !== 0;
        case OBJECT_TYPE.array:
            if (obj.length === 0 || obj.length !== obj.filter((val) => val).length) {
                return false;
            }
            return obj.filter((val) => isTrueValue(val)).length === obj.length;
        // TODO
        case OBJECT_TYPE.set:
        case OBJECT_TYPE.map:
            return true;
        case OBJECT_TYPE.number:
            return !Number.isNaN(obj);
        case OBJECT_TYPE.string:
            return !['', 'null', 'nan', 'undefined', '{}', '[]'].includes(String.prototype.toLowerCase.call(obj));
        case OBJECT_TYPE.func:
        case OBJECT_TYPE.bool:
        case OBJECT_TYPE.date:
        case OBJECT_TYPE.regexp:
        case OBJECT_TYPE.symbol:
        case OBJECT_TYPE.error:
            return true;
        case OBJECT_TYPE.null:
        case OBJECT_TYPE.undefined:
            return false;
        default:
            return false;
    }
};
/**
 * 判断入參是否为对象
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是对象, false: 不是对象
 * @example
 * sObject.isObject(item)
 */
const isObject$1 = (obj) => {
    return Object.prototype.toString.call(obj) === OBJECT_TYPE.object;
};
/**
 * 判断入參是否为Set
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean}
 * @example
 * sObject.isSet(item)
 */
const isSet = (obj) => {
    return Object.prototype.toString.call(obj) === OBJECT_TYPE.set;
};
/**
 * 判断入參是否为Map
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是Map, false: 不是Map
 * @example
 * sObject.isMap(item)
 */
const isMap = (obj) => {
    return Object.prototype.toString.call(obj) === OBJECT_TYPE.map;
};
/**
 * 判断入參是否为Buffer
 * @static
 * @since 0.0.3
 * @param {any} obj 待检测的对象
 * @returns {boolean} true: 是Buffer, false: 不是Buffer
 * @example
 * sObject.isBuffer(item)
 */
const isBuffer = (obj) => {
    return Buffer.isBuffer(obj);
};
var index$6 = { OBJECT_TYPE, UN_CLONE_ABLE_TYPE, isTrueValue, isObject: isObject$1, isSet, isMap, isBuffer };

/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * @module sArray
 * @since 0.0.2
 * @description sArray模块, 提供数组处理
 * @example
 * // first import sArray
 * import { sArray } from 'js-simple-utils'
 * // then use sArray
 * sArray.isArray('123@gmail.com') // false
 * sArray.initArray('123@gmail.com') // []
 * sArray.initArray(['null']) // ['null']
 * sArray.initArray(['null', null, 1], true) // [1]
 */
/**
 * 判断是否为数组
 * @static
 * @since 0.0.3
 * @param {any} arr 待检测的数组
 * @returns {Boolean} 是否为数组
 * @example
 * sArray.isArray('') // false
 */
const isArray = (arr) => {
    return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';
};
/**
 * 初始化数组
 * @static
 * @since 0.0.3
 * @description 初始化数组, 如果传入的是数组，去除非真值后返回，否则返回空数组
 * @param {any} obj 待初始化的对象
 * @param {?boolean} onlyTrueValue 是否只返回真值
 * @returns {Array} 初始化后的数组
 * @example
 * sArray.initArray('') // []
 * sArray.initArray('null') // []
 * sArray.initArray(['null']) // ['null']
 * sArray.initArray(['null', null, 1], true) // [1]
 */
const initArray = (obj, onlyTrueValue = false) => {
    if (isArray(obj)) {
        return onlyTrueValue ? obj.filter((item) => isTrueValue(item)) : obj;
    }
    return [];
};
/**
 * 填充数组
 * @static
 * @since 0.0.3
 * @description 填充数组, 如果传入的数组长度不为0，则扩充至指定长度后填充非真值位置后返回，否则返回指定长度并填充传入value值的数组
 * @param {any[]} list 待填充的数组
 * @param {number} length 要填充的长度
 * @param {?any} value 被填充的值
 * @returns {any[]} 填充后的数组
 * @example
 * sArray.fillArray([1, 2, 3], 5, 0) // [1, 2, 3, 0, 0]
 * sArray.fillArray([], 5, 'a') // ['a', 'a', 'a', 'a', 'a']
 */
const fill = (list, length, value = '', onlyTrueValue = false) => {
    if (list.length === 0) {
        return Array.from({ length }).fill(value);
    }
    return (Array.from(Object.assign(Object.assign({}, list), { length }))
        // eslint-disable-next-line no-nested-ternary
        .filter(item => (onlyTrueValue ? (isTrueValue(item) ? item : false) : true))
        .map((item) => {
        // eslint-disable-next-line no-nested-ternary
        return onlyTrueValue ? (isTrueValue(item) ? item : value) : value;
    }));
};
/**
 * 数组遍历回调函数
 * @since 0.0.3
 * @callback forEachCallback
 * @param {any} item 当前遍历的数组元素
 * @param {?string} index 当前遍历的数组元素索引
 * @param {?string} arr 当前遍历的数组
 * @returns {any|never} 返回值, 如果返回false, 则中断遍历
 */
/**
 * 使用while循环进行遍历数组
 * @static
 * @since 0.0.3
 * @param {Array} [arr] 待遍历的数组
 * @param {forEachCallback} callback 回调函数
 * @returns {Array} 遍历后的数组
 * @example
 * sArray.forEach([1, 2, 3], (item, index, arr) => {})
 */
const forEach = (arr, callback) => {
    let index = -1;
    const length = arr == null ? 0 : arr.length;
    while (++index < length) {
        if (callback(arr[index], index, arr) === false) {
            break;
        }
    }
    return arr;
};
var index$5 = { isArray, initArray, fill, forEach };

/**
 * @module sString
 * @since 0.0.3
 * @description sString模块, 提供字符串处理
 * @example
 * // first import sString
 * import { sString } from 'js-simple-utils'
 * // then use sString
 * sString.padEnd('asd', 3); // 'asd   '
 * sString.padEnd('asd', 3, '_-'); // 'asd_-_'
 * sString.padStart('asd', 3); // '   asd'
 * sString.padStart('asd', 3, '_-'); // '_-_asd'
 */
/**
 * 以指定字符串为中心向两侧扩展到指定的长度
 * @static
 * @since 0.0.3
 * @param {string} [string=''] 要扩展的字符串
 * @param {number} [length=0] 扩展后字符串的总长度
 * @param {string} [chars=' '] 用于补齐的字符
 * @returns {string} 扩展后的字符串
 * @example
 * sString.pad('abc', 8); // '   abc   '
 * sString.pad('abc', 8, '_-'); // '_-abc_-_'
 */
const pad = (string = '', length = 0, chars = ' ') => {
    const strLength = length ? string.length : 0;
    if (!length || strLength >= length) {
        return string;
    }
    const mid = (length - strLength) / 2;
    return createPadding(Math.floor(mid), chars) + string + createPadding(Math.ceil(mid), chars);
};
/**
 * 在字符串的右侧补齐到指定的长度
 * @static
 * @since 0.0.3
 * @param {string} [string=''] 要补齐的字符串
 * @param {number} [length=0] 待补齐的字符串长度
 * @param {string} [chars=' '] 用于补齐的字符
 * @returns {string} 补齐后的字符串
 * @example
 * sString.padEnd('abc', 3); // 'abc   '
 * sString.padEnd('abc', 3, '_-'); // 'abc_-_'
 */
const padEnd = (string = '', length = 0, chars = ' ') => {
    const strLength = length ? string.length : 0;
    return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
};
/**
 * 在字符串的左侧补齐到指定的长度
 * @static
 * @since 0.0.3
 * @param {string} [string=''] 要补齐的字符串
 * @param {number} [length=0] 待补齐的字符串长度
 * @param {string} [chars=' '] 用于补齐的字符
 * @returns {string} 补齐后的字符串
 * @example
 * sString.padStart('abc', 3); // 'abc   '
 * sString.padStart('abc', 3, '_-'); // '_-_abc'
 */
const padStart = (string = '', length = 0, chars = ' ') => {
    const strLength = length ? string.length : 0;
    return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
};
/**
 * 创建一个指定长度的字符串，默认为空格，可以自定义字符
 * @private
 * @param {number} [length=0] 要创建的字符串长度
 * @param {string} [chars=' '] 要创建的字符串的字符
 * @returns {string} 返回创建的字符串
 */
const createPadding = (length = 0, chars = ' ') => {
    let str = '';
    for (let i = 0; i < length; i++) {
        str += chars;
    }
    return str;
};
var index$4 = { pad, padEnd, padStart };

/**
 * @module sNumber
 * @since 0.0.3
 * @description sNumber模块, 提供数值处理
 * @example
 * // first import sNumber
 * import { sNumber } from 'js-simple-utils'
 * // then use sNumber
 * sNumber.pad0(123, 2); // '123'
 * sNumber.pad0(123, 5); // '00123'
 * sNumber.pad0(123, -5); // '12300'
 */
/**
 * 默认将数值在左侧用0补齐至指定长度，数量为负数时在右侧补齐，也可以自定义补齐的字符
 * @static
 * @since 0.0.3
 * @param {string|number} [string=''] 要补齐的字符串或数值
 * @param {number} [length=1] 待补齐的长度
 * @param {string} [chars='0'] 用于补齐的字符
 * @returns {string} 补齐后的字符串
 * @example
 * sNumber.pad0(1, 2); // '01'
 * sNumber.pad0(12, 4); // '0012'
 * sNumber.pad0(123, -3); // '123000'
 * sNumber.pad0(123, 2, '-'); // '123'
 */
const pad0 = (string, length = 1, chars = '0') => {
    return `${length > 0 ? padStart(String(string), length, chars) : padEnd(String(string), -length, chars)}`;
};
/**
 * 数字 正则表达式
 * @static
 * @since 0.0.3
 * @constant {RegExp} NUMBER
 * @example
 * sNumber.NUMBER.test('123') // true
 */
const NUMBER = NUMBER$1;
/**
 * 是否是正整数
 * @static
 * @since 0.0.3
 * @function
 * @param {string} int 整数
 * @returns {boolean} true是/false否
 * @example
 * sNumber.isNumber('123') // true
 */
const isNumber = isNumber$1;
var index$3 = { NUMBER, pad0, isNumber };

/**
 * @module sDom
 * @since 0.0.3
 * @description sDom模块, 提供DOM相关处理
 * @example
 * // first import sDom
 * import { sDom } from 'js-simple-utils'
 * // then use sDom
 * onClick={sObject.stopPropagation}
 * onClick={sObject.preventDefault}
 * onClick={sObject.stopAndPrevent}
 */
/**
 * 阻止事件冒泡
 * @static
 * @since 0.0.3
 * @param {Event} e 事件对象
 * @returns {void}
 * @example
 * sDom.stopPropagation(e)
 */
const stopPropagation = (e) => {
    e.stopPropagation();
};
/**
 * 取消事件默认行为
 * @static
 * @since 0.0.3
 * @param {Event} e 事件对象
 * @returns {void}
 * @example
 * sDom.preventDefault(e)
 */
const preventDefault = (e) => {
    e.preventDefault();
};
/**
 * 阻止事件冒泡+取消事件默认行为
 * @static
 * @since 0.0.3
 * @param {Event} e 事件对象
 * @returns {void}
 * @example
 * sDom.stopAndPrevent(e)
 */
const stopAndPrevent = (e) => {
    stopPropagation(e);
    preventDefault(e);
};
var index$2 = { stopPropagation, preventDefault, stopAndPrevent };

/* eslint-disable @typescript-eslint/no-explicit-any, no-multi-assign */
/**
 * @module sFunction
 * @since 0.0.3
 * @description sFunction模块, 提供函数相关/独立函数处理
 * @example
 * // first import sFunction
 * import { sFunction } from 'js-simple-utils'
 * // then use sFunction
 * sFunction.isTrueValue('123@gmail.com'); // true
 */
/**
 * 空函数
 * @static
 * @since 0.0.3
 * @returns {void}
 */
// eslint-disable-next-line prettier/prettier, @typescript-eslint/no-empty-function
const noop = () => { };
// 此处仅适用于深拷贝函数使用
function isObject(value) {
    return value != null && (typeof value == 'object' || typeof value == 'function');
}
/**
 * 深拷贝
 * @static
 * @since 0.0.3
 * @description 使用广度优先方式进行深拷贝，已支持类型：非对象、数组、对象、正则、日期、Symbol、Map、Set<br>
 * 对于一般js对象或后端返回数据可放心使用<br>
 * 若待拷贝对象内包含函数，慎用
 * @param {any} value 待拷贝的值
 * @returns {any} 拷贝后的值
 * @example
 * const obj = { a:1, b:true, c: new Date(), d: new Map(), e: new Set(), f: /\d+/g, g: [1,2,3], h: { i:1 } };
 * obj.z = obj;
 * const objC = sFunction.clone(obj);
 * console.log(obj === objC); // false
 * console.log(obj == objC); // true
 * console.log(obj.h === objC.h); // false
 * console.log(obj.h == objC.h); // true
 */
const deepClone = (value) => {
    if (!isObject(value)) {
        return value;
    }
    // 浏览器内置API
    // https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
    if (isTrueValue((window || global || globalThis).structuredClone)) {
        return structuredClone(value);
    }
    // 处理根为 {} | [] 类型的对象
    const root = Object.prototype.toString.call(value) == OBJECT_TYPE.array
        ? new value.constructor(value)
        : Object.create(Object.getPrototypeOf(value));
    const weekMap = new WeakMap();
    weekMap.set(value, root);
    // 栈
    const loopList = [
        {
            parent: root,
            key: undefined,
            data: value,
        },
    ];
    while (loopList.length) {
        // 广度优先
        const node = loopList.pop();
        const parent = node.parent;
        const key = node.key;
        const data = node.data;
        // 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素
        let res = parent;
        if (isTrueValue(key)) {
            // eslint-disable-next-line default-case
            switch (Object.prototype.toString.call(data)) {
                case OBJECT_TYPE.map:
                case OBJECT_TYPE.set:
                case OBJECT_TYPE.array:
                    if (weekMap.has(data)) {
                        const d = weekMap.get(data);
                        res = parent[key] = new d.constructor(d);
                    }
                    else {
                        res = parent[key] = new data.constructor(data);
                    }
                    break;
                case OBJECT_TYPE.symbol: // Symbol 类型
                    res = parent[key] = Object(Symbol.prototype.valueOf.call(data)) || {};
                    break;
                case OBJECT_TYPE.date: // Date 类型
                    res = parent[key] = new Date(data.getTime());
                    break;
                case OBJECT_TYPE.regexp: // RegExp 类型
                    res = parent[key] = cloneRegExp(data);
                    break;
                default:
                    if (weekMap.has(data)) {
                        parent[key] = weekMap.get(data);
                        // eslint-disable-next-line no-continue
                        continue;
                    }
                    res = parent[key] = Object.create(Object.getPrototypeOf(data));
                    // 避免死循环
                    weekMap.set(data, res);
            }
        }
        for (const k in data) {
            if (Object.prototype.hasOwnProperty.call(data, k)) {
                if (isObject(data[k])) {
                    // 避免死循环
                    if (weekMap.has(data[k])) {
                        res[k] = weekMap.get(data[k]);
                        // eslint-disable-next-line no-continue
                        continue;
                    }
                    // 下一次循环
                    loopList.push({
                        parent: res,
                        key: k,
                        data: data[k],
                    });
                }
                else {
                    // eslint-disable-next-line default-case
                    switch (Object.prototype.toString.call(data)) {
                        case OBJECT_TYPE.map:
                            Map.prototype.set.call(res, k, data[k]);
                            break;
                        case OBJECT_TYPE.set:
                            Set.prototype.add.call(res, data[k]);
                            break;
                        case OBJECT_TYPE.array:
                            if (!isArray(res)) {
                                res = initArray(res);
                            }
                            res[k] = data[k];
                            break;
                        case OBJECT_TYPE.symbol: // Symbol 类型
                            // TODO
                            break;
                        default:
                            res[k] = weekMap.has(data[k]) ? weekMap.get(data[k]) : data[k];
                    }
                }
            }
        }
    }
    return root;
};
var index$1 = { noop, deepClone };

/* eslint-disable no-unused-vars, @typescript-eslint/no-explicit-any */
/**
 * @module sUrl
 * @since 0.0.3
 * @description sUrl模块, 提供数值处理
 * @example
 * // first import sUrl
 * import { sUrl } from 'js-simple-utils'
 * // then use sUrl
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18'); // {name: 's', age: '18'}
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18', 'name'); // 's'
 * sUrl.setUrlParams('http://www.baidu.com', {name: 's', age: '18'}); // 'http://www.baidu.com/?name=s&age=18'
 */
/**
 * 完整url
 * @static
 * @since 0.0.3
 * @constant {RegExp} URL
 * @example
 * sUrl.URL_REGEXP.test('http://www.baidu.com?name=s&age=18'); // true
 */
const URL_REGEXP = URL$1;
const formatVal = (val) => {
    if (isNumber$1(String(val))) {
        return Number(val);
    }
    if (String(val) === 'true' || String(val) === 'false') {
        return Boolean(val);
    }
    return val;
};
/**
 * 获取url中指定params
 * @static
 * @since 0.0.3
 * @description 若指定params存在， 则返回指定params的值， 否则返回null
 * @param {string} url url
 * @param {?string} name 参数名
 * @returns {string | number | boolean | Array<number | string | boolean> | Record<string, string | number | boolean | Array<number | string | boolean>> | null} 参数值
 * @example
 * sUrl.getUrlParams('http://www.baidu.com?name=s&age=18'); // {name: 's', age: '18'}
 */
const getUrlParams = (url, name) => {
    let res;
    // 优先浏览器内置API
    if (URLSearchParams !== undefined) {
        const params = new URLSearchParams(new URL(url).search);
        if (isTrueValue(name)) {
            const arr = initArray(params.getAll(name)).map(item => formatVal(item));
            return arr.length === 1 ? arr[0] : arr;
        }
        res = {};
        params.forEach((val, key) => {
            if (Object.prototype.hasOwnProperty.call(res, key)) {
                if (isArray(res[key])) {
                    Array.prototype.push.call(res[key], formatVal(val));
                }
                else {
                    res[key] = Array.from([res[key], formatVal(val)]);
                }
            }
            else {
                res[key] = formatVal(val);
            }
        });
        return res;
    }
    // 暂无完美正则可适配所有场景
    // 正则
    // const arr: Record<string, string | number | boolean>[] = initArray(encodeURI(url).match(/\w+=\w+/gi)).map(
    //     (item: string) => {
    //         const paramArr: string[] = item.split('=')
    //         return { [paramArr[0]]: formatVal(paramArr[1]) }
    //     }
    // )
    // 手动截取
    return parseSearchQuery(url.split('?')[1], name);
};
/**
 * 转换url的params为对象，若指定key，则返回指定key的值，否则返回所有值
 * @param {String} querySearchStr 查询字符串
 * @param {String} key 参数名
 * @returns {Object|string | boolean | number } 参数值
 */
const parseSearchQuery = (querySearchStr, key) => {
    var _a;
    const arr = (_a = querySearchStr
        .substring(querySearchStr.indexOf('?') + 1)
        .split('&')) === null || _a === void 0 ? void 0 : _a.map((item) => {
        const paramArr = item.split('=');
        return { [decodeURIComponent(paramArr[0])]: formatVal(decodeURIComponent(paramArr[1])) };
    });
    let res;
    if (isTrueValue(key)) {
        forEach(arr, (item) => {
            if (Object.prototype.hasOwnProperty.call(item, key)) {
                if (isTrueValue(res)) {
                    if (isArray(res)) {
                        Array.prototype.push.call(res, item[key]);
                    }
                    else {
                        res = [res, item[key]];
                    }
                }
                else {
                    res = item[key];
                }
            }
        });
        return res;
    }
    res = {};
    forEach(arr, (item) => {
        Object.entries(item).forEach(([key, val]) => {
            if (res[key]) {
                if (isArray(res[key])) {
                    Array.prototype.push.call(res[key], val);
                }
                else {
                    res[key] = [res[key], val];
                }
            }
            else {
                res[key] = val;
            }
        });
    });
    return res;
};
/**
 * 转换对象为url拼接的字符串
 * @param {Object} data 对象
 * @returns {String} url拼接的字符串，需自行处理首位符号(?|&)
 */
const stringifySearchQuery = (data = {}) => new URLSearchParams(data).toString();
/**
 * 给url拼接指定params并返回新的url
 * @static
 * @since 0.0.3
 * @description params或者name和value只能传入一个
 * @param {string} url 原始url
 * @param {?Record<string, string | boolean | number | ReadonlyArray<string | boolean | number>>} params 参数对象
 * @param {?string} name 参数名
 * @param {?(string | boolean | number | ReadonlyArray<string | boolean | number>)} value 参数值
 * @returns {string} url 拼接好的url
 * @example
 * sUrl.setUrlParams('http://www.baidu.com', 'name', 'test'); // http://www.baidu.com/?name=test
 * sUrl.setUrlParams('http://www.baidu.com/#123', 'name', 'test'); // http://www.baidu.com/?name=test#123
 * sUrl.setUrlParams('http://www.baidu.com', { name: 'test', value: 'test' }); // http://www.baidu.com/?name=test&value=test
 * sUrl.setUrlParams('http://www.baidu.com', 'name', ['test', '123']); // http://www.baidu.com/?name=test&name=123
 * sUrl.setUrlParams('http://www.baidu.com', { 'name': ['test', '123'] }); // http://www.baidu.com/?name=test&name=123
 */
function setUrlParams(url, ...rest) {
    let params;
    if (rest.length === 1) {
        params = [];
        forEach(Object.entries(rest[0]), ([key, value]) => {
            if (isArray(value)) {
                forEach(value, (item) => {
                    params.push([String(key), String(item)]);
                });
            }
            else {
                params.push([key, value]);
            }
        });
    }
    if (rest.length === 2) {
        if (isArray(rest[1])) {
            params = [];
            forEach(rest[1], (item) => {
                params.push([String(rest[0]), String(item)]);
            });
        }
        else {
            params = [[rest[0], String(rest[1])]];
        }
    }
    const newUrl = new URL(url);
    const { hash, origin, pathname, search } = newUrl;
    return isTrueValue(search)
        ? `${origin + pathname}${search}&${stringifySearchQuery(params)}${hash}`
        : `${origin + pathname}?${stringifySearchQuery(params)}${hash}`;
}
/**
 * 是否是完整url
 * @static
 * @since 0.0.3
 * @function
 * @param {string} url 完整url
 * @returns {boolean} true是/false否
 * @example
 * sUrl.isUrl('http://www.baidu.com'); // true
 */
const isUrl = isUrl$1;
var index = { URL_REGEXP, isUrl, getUrlParams, setUrlParams, parseSearchQuery, stringifySearchQuery };

/**
 * @since 0.0.1
 * @description 包使用默认引入，起名规则为s${大驼峰子模块名}
 */
/**
 * @module sCommon
 * @since 0.0.1
 * @description sCommon模块, 整合高频通用工具函数
 * @see {@link sStore}
 * @see {@link sArray.isArray}
 * @see {@link sArray.initArray}
 * @see {@link sArray.fill}
 * @see {@link sObject.isTrueValue}
 * @example
 * // first import sCommon
 * import { sCommon } from 'js-simple-utils'
 * // then use sCommon
 * sCommon.isArray('123@gmail.com') // false
 * sCommon.isTrueValue('') // false
 */
/**
 *@ignore
 */
const sCommon = Object.assign(Object.assign({}, sStore), { 
    // from sArray
    isArray,
    initArray,
    fill,
    // from sObject
    isTrueValue,
    // from sString
    padStart,
    padEnd,
    // from sNumber
    pad0,
    // from sDom
    stopPropagation,
    preventDefault,
    stopAndPrevent,
    // from sFunction
    noop,
    deepClone,
    // from sUrl
    getUrlParams,
    setUrlParams });

exports.sArray = index$5;
exports.sCommon = sCommon;
exports.sCookie = cookie;
exports.sDate = index$7;
exports.sDom = index$2;
exports.sFunction = index$1;
exports.sLocalStorage = localStorage;
exports.sNumber = index$3;
exports.sObject = index$6;
exports.sRegExp = index$8;
exports.sSessionStorage = sessionStorage;
exports.sStore = sStore;
exports.sString = index$4;
exports.sUrl = index;
