'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var RegExp_password = require('./password.js');
var RegExp_phone = require('./phone.js');

/* eslint-disable no-useless-escape */
/**
 * @module sRegExp
 * @since 0.0.1
 * @description sRegExp模块, 提供正则表达式
 * @example
 * // first import sRegExp
 * import { sRegExp } from 'js-simple-utils'
 * // then use sRegExp
 * sRegExp.isEmail('123@gmail.com')
 * sRegExp.EMAIL.test('123@gmail.com')
 */
const { PASSWORD, PASSWORD_NUM_4, PASSWORD_NUM_6, PASSWORD_ALL_6_16, isPassword, isPasswordNum4, isPasswordNum6, isPasswordAll6To16, } = RegExp_password["default"];
const { PHONE, PHONE_86, PHONE_OTHER, isPhone, isPhone86, isPhoneOther } = RegExp_phone["default"];
/**
 * 电子邮件
 * @static
 * @since 0.0.2
 * @constant {RegExp} EMAIL
 * @example
 * sRegExp.EMAIL.test('123@qq.com')
 */
const EMAIL = /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/;
/**
 * 日期字符串
 * @inner
 * @since 0.0.2
 * @constant {RegExp} DATE_STRING
 * @example
 * 2022-01-01 00:00:00
 * 2022-01-01 00.00.00
 * 2022/01/01 00:00:00
 * 2022/01/01 00.00.00
 * sRegExp.DATE_STRING.test(item) // true
 */
const DATE_STRING = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/;
/**
 * 日期字符串格式化模版
 * @inner
 * @since 0.0.2
 * @constant {RegExp} DATE_STRING_FORMAT
 * @example
 * sRegExp.DATE_STRING_FORMAT.test(item) // true
 */
const DATE_STRING_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;
/**
 * 邮编
 * @static
 * @since 0.0.2
 * @constant {RegExp} POST_CODE
 * @example
 * sRegExp.POST_CODE.test('123456') // true
 */
const POST_CODE = /^\d+$/;
/**
 * 数字
 * @static
 * @since 0.0.2
 * @constant {RegExp} NUMBER
 * @example
 * sRegExp.NUMBER.test('123') // true
 */
const NUMBER = /^\d+$/;
/**
 * 正整数
 * @static
 * @since 0.0.2
 * @constant {RegExp} INTEGER
 * @example
 * sRegExp.INTEGER.test('123') // true
 */
const INTEGER = /^(([1-9]\d*)|0)$/;
/**
 * 完整url
 * @static
 * @since 0.0.2
 * @constant {RegExp} URL
 * @example
 * sRegExp.URL.test('https://www.baidu.com') // true
 */
const URL = /^(?:(?:ht|f)tp(?:s?)\:\/\/|~\/|\/)?(?:\w+:\w+@)?((?:(?:[-\w\d{1-3}]+\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\.uk|ac\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2}))|((\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)(\.(\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)){3}))(?::[\d]{1,5})?(?:(?:(?:\/(?:[-\w~!$+|.,=]|%[a-f\d]{2})+)+|\/)+|\?|#)?(?:(?:\?(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)(?:&(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)*)*(?:#(?:[-\w~!$ |\/.,*:;=]|%[a-f\d]{2})*)?$/i;
/**
 * 是否是电子邮件
 * @static
 * @since 0.0.2
 * @param {string} email 字符串
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isEmail('123@qq.com') // true
 */
const isEmail = (email) => EMAIL.test(email);
/**
 * 是否是邮编
 * @static
 * @since 0.0.2
 * @param {number} postCode 字符串
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isPostCode('123456') // true
 */
const isPostCode = (postCode) => POST_CODE.test(postCode);
/**
 * 判断是否是数字
 * @static
 * @since 0.0.2
 * @param {string} number 数字
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isNumber('123') // true
 */
const isNumber = (number) => NUMBER.test(number);
/**
 * 是否是正整数
 * @static
 * @since 0.0.2
 * @param {string} int 整数
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isInteger('123') // true
 */
const isInteger = (int) => INTEGER.test(int);
/**
 * 是否是完整url
 * @static
 * @since 0.0.2
 * @param {string} url 完整url
 * @returns {boolean} true是/false否
 * @example
 * sRegExp.isUrl('https://www.baidu.com') // true
 */
const isUrl = (url) => URL.test(url);
/**
 * 复制正则表达式
 * @static
 * @since 0.0.3
 * @param {Object} regexp 正则表达式
 * @returns {Object} 正则表达式
 * @example
 * sRegExp.cloneRegExp(/^a/i) // /^a/i
 */
const cloneRegExp = (regexp) => {
    const result = new regexp.constructor(regexp.source, /\w*$/.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
};
var index = {
    // password
    PASSWORD,
    PASSWORD_NUM_4,
    PASSWORD_NUM_6,
    PASSWORD_ALL_6_16,
    cloneRegExp,
    isPassword,
    isPasswordNum4,
    isPasswordNum6,
    isPasswordAll6To16,
    // phone
    PHONE,
    PHONE_86,
    PHONE_OTHER,
    isPhone,
    isPhone86,
    isPhoneOther,
    //
    EMAIL,
    POST_CODE,
    NUMBER,
    INTEGER,
    URL,
    isEmail,
    isPostCode,
    isNumber,
    isInteger,
    isUrl,
};

exports.DATE_STRING = DATE_STRING;
exports.DATE_STRING_FORMAT = DATE_STRING_FORMAT;
exports.EMAIL = EMAIL;
exports.INTEGER = INTEGER;
exports.NUMBER = NUMBER;
exports.PASSWORD = PASSWORD;
exports.PASSWORD_ALL_6_16 = PASSWORD_ALL_6_16;
exports.PASSWORD_NUM_4 = PASSWORD_NUM_4;
exports.PASSWORD_NUM_6 = PASSWORD_NUM_6;
exports.PHONE = PHONE;
exports.PHONE_86 = PHONE_86;
exports.PHONE_OTHER = PHONE_OTHER;
exports.POST_CODE = POST_CODE;
exports.URL = URL;
exports.cloneRegExp = cloneRegExp;
exports["default"] = index;
exports.isEmail = isEmail;
exports.isInteger = isInteger;
exports.isNumber = isNumber;
exports.isPassword = isPassword;
exports.isPasswordAll6To16 = isPasswordAll6To16;
exports.isPasswordNum4 = isPasswordNum4;
exports.isPasswordNum6 = isPasswordNum6;
exports.isPhone = isPhone;
exports.isPhone86 = isPhone86;
exports.isPhoneOther = isPhoneOther;
exports.isPostCode = isPostCode;
exports.isUrl = isUrl;
