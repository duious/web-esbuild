/**
 * @module sString
 * @since 0.0.3
 * @description sString模块, 提供字符串处理
 * @example
 * // first import sString
 * import { sString } from 'js-simple-utils'
 * // then use sString
 * sString.padEnd('asd', 3); // 'asd   '
 * sString.padEnd('asd', 3, '_-'); // 'asd_-_'
 * sString.padStart('asd', 3); // '   asd'
 * sString.padStart('asd', 3, '_-'); // '_-_asd'
 */
/**
 * 以指定字符串为中心向两侧扩展到指定的长度
 * @static
 * @since 0.0.3
 * @param {string} [string=''] 要扩展的字符串
 * @param {number} [length=0] 扩展后字符串的总长度
 * @param {string} [chars=' '] 用于补齐的字符
 * @returns {string} 扩展后的字符串
 * @example
 * sString.pad('abc', 8); // '   abc   '
 * sString.pad('abc', 8, '_-'); // '_-abc_-_'
 */
declare const pad: (string?: string, length?: number, chars?: string) => string;
/**
 * 在字符串的右侧补齐到指定的长度
 * @static
 * @since 0.0.3
 * @param {string} [string=''] 要补齐的字符串
 * @param {number} [length=0] 待补齐的字符串长度
 * @param {string} [chars=' '] 用于补齐的字符
 * @returns {string} 补齐后的字符串
 * @example
 * sString.padEnd('abc', 3); // 'abc   '
 * sString.padEnd('abc', 3, '_-'); // 'abc_-_'
 */
declare const padEnd: (string?: string, length?: number, chars?: string) => string;
/**
 * 在字符串的左侧补齐到指定的长度
 * @static
 * @since 0.0.3
 * @param {string} [string=''] 要补齐的字符串
 * @param {number} [length=0] 待补齐的字符串长度
 * @param {string} [chars=' '] 用于补齐的字符
 * @returns {string} 补齐后的字符串
 * @example
 * sString.padStart('abc', 3); // 'abc   '
 * sString.padStart('abc', 3, '_-'); // '_-_abc'
 */
declare const padStart: (string?: string, length?: number, chars?: string) => string;
declare const _default: {
    pad: (string?: string, length?: number, chars?: string) => string;
    padEnd: (string?: string, length?: number, chars?: string) => string;
    padStart: (string?: string, length?: number, chars?: string) => string;
};
export default _default;
export { pad, padEnd, padStart };
