/**
 * @module sArray
 * @since 0.0.2
 * @description sArray模块, 提供数组处理
 * @example
 * // first import sArray
 * import { sArray } from 'js-simple-utils'
 * // then use sArray
 * sArray.isArray('123@gmail.com') // false
 * sArray.initArray('123@gmail.com') // []
 * sArray.initArray(['null']) // ['null']
 * sArray.initArray(['null', null, 1], true) // [1]
 */
/**
 * 判断是否为数组
 * @static
 * @since 0.0.3
 * @param {any} arr 待检测的数组
 * @returns {Boolean} 是否为数组
 * @example
 * sArray.isArray('') // false
 */
declare const isArray: (arr: any) => boolean;
/**
 * 初始化数组
 * @static
 * @since 0.0.3
 * @description 初始化数组, 如果传入的是数组，去除非真值后返回，否则返回空数组
 * @param {any} obj 待初始化的对象
 * @param {?boolean} onlyTrueValue 是否只返回真值
 * @returns {Array} 初始化后的数组
 * @example
 * sArray.initArray('') // []
 * sArray.initArray('null') // []
 * sArray.initArray(['null']) // ['null']
 * sArray.initArray(['null', null, 1], true) // [1]
 */
declare const initArray: (obj: any, onlyTrueValue?: boolean) => any[];
/**
 * 填充数组
 * @static
 * @since 0.0.3
 * @description 填充数组, 如果传入的数组长度不为0，则扩充至指定长度后填充非真值位置后返回，否则返回指定长度并填充传入value值的数组
 * @param {any[]} list 待填充的数组
 * @param {number} length 要填充的长度
 * @param {?any} value 被填充的值
 * @returns {any[]} 填充后的数组
 * @example
 * sArray.fillArray([1, 2, 3], 5, 0) // [1, 2, 3, 0, 0]
 * sArray.fillArray([], 5, 'a') // ['a', 'a', 'a', 'a', 'a']
 */
declare const fill: (list: any[], length: number, value?: string, onlyTrueValue?: boolean) => any[];
/**
 * 数组遍历回调函数
 * @since 0.0.3
 * @callback forEachCallback
 * @param {any} item 当前遍历的数组元素
 * @param {?string} index 当前遍历的数组元素索引
 * @param {?string} arr 当前遍历的数组
 * @returns {any|never} 返回值, 如果返回false, 则中断遍历
 */
/**
 * 使用while循环进行遍历数组
 * @static
 * @since 0.0.3
 * @param {Array} [arr] 待遍历的数组
 * @param {forEachCallback} callback 回调函数
 * @returns {Array} 遍历后的数组
 * @example
 * sArray.forEach([1, 2, 3], (item, index, arr) => {})
 */
declare const forEach: (arr: any[], callback: (item: any, index?: number, arr?: any[]) => any) => any[];
declare const _default: {
    isArray: (arr: any) => boolean;
    initArray: (obj: any, onlyTrueValue?: boolean) => any[];
    fill: (list: any[], length: number, value?: string, onlyTrueValue?: boolean) => any[];
    forEach: (arr: any[], callback: (item: any, index?: number, arr?: any[]) => any) => any[];
};
export default _default;
export { isArray, initArray, fill, forEach };
